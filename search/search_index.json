{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Stylus Cache Manager \ud83d\ude80","text":"<p>This documentation is meant for anyone working with the Stylus Cache Manager (CM) \u2013 from smart-contract developers and dev-ops engineers to testers and end-users running their own deployments.</p> <p>Stylus CM sits on top of Arbitrum\u2019s CacheManager contract and provides everything you need to reserve, monitor, and automatically maintain cache slots for high-performance Stylus applications.</p>"},{"location":"#what-is-the-cache-manager","title":"\ud83d\udd39 What is the Cache Manager?","text":"<p>On Arbitrum, stylus contracts can bid for dedicated space in a low-latency WASM cache. Holding a slot dramatically reduces gas costs and speeds up hot-path calls, but it requires managing periodic bids to keep the slot alive.</p> <p>Stylus Cache Manager simplifies this process by providing:</p> <ul> <li>Smart-contracts that encapsulate bidding logic and escrow-based fund management.</li> <li>Automation jobs that keep your bids active 24/7.</li> <li>A full-featured web UI with live dashboards, alerting, and one-click actions.</li> <li>Deployment scripts so you can run the entire stack locally or on-prem.</li> </ul>"},{"location":"#project-at-a-glance","title":"\ud83c\udfd7\ufe0f Project at a glance","text":"<p>This repository is a meta-project that pulls together several sub-modules:</p> Sub-module Description <code>stylus-cm-contracts</code> Solidity / Stylus contracts + tests <code>stylus-cm-backend</code> REST &amp; WebSocket API powering the UI and automation agents <code>stylus-cm-frontend</code> Next.js dApp for interacting with Cache Manager and Backend <code>stylus-cm-nginx</code> Reverse-proxy with TLS &amp; static assets <code>nitro-testnode</code> Arbitrum Nitro local node for testing"},{"location":"#quick-links","title":"\ud83d\ude80 Quick links","text":"<ul> <li>Public dApp: https://stylus.cobuilders.xyz</li> <li>Source code: https://github.com/cobuilders-xyz/stylus-cm-deploy</li> <li>Live docs (this site): https://cobuilders-xyz.github.io/stylus-cm-deploy/</li> </ul>"},{"location":"#next-steps","title":"\ud83d\udccc Next steps","text":"<p>Ready to dive in?</p> <ol> <li>Head over to Getting Started \u279c Cache Manager Basics for a conceptual overview.</li> <li>Spin up a local Arbitrum test node and interact with CM by following Guided Testing.</li> <li>When you\u2019re comfortable, deploy the full system with Docker Compose or explore other deployment options.</li> </ol> <p>Use the navigation panel to explore every part of Stylus Cache Manager.</p> <p>\ud83d\udca1 Tip: Documentation is a work in progress. If you spot an issue or want to contribute, open a PR or file an issue on GitHub!</p>"},{"location":"deep-dive/bid-automations/","title":"Bid Automations","text":"<p>Bid automations eliminate the need for manual bid management by automatically placing bids for your contracts when cache conditions warrant it. When you enable automation through the frontend, a sophisticated system works behind the scenes to keep your contracts cached.</p>"},{"location":"deep-dive/bid-automations/#what-happens-when-you-enable-automation","title":"What Happens When You Enable Automation","text":"<p>When you set up automated bidding through the frontend, you're configuring a system that continuously monitors cache conditions, evaluates your contracts for bidding eligibility, automatically places bids when conditions are met, and manages your funds through a secure escrow system.</p> <p>The automation architecture flows from your frontend configuration to backend monitoring, then to smart contract execution, and finally to cache management. This creates a seamless pipeline that handles all the complexity of cache management without requiring your constant attention.</p>"},{"location":"deep-dive/bid-automations/#system-components","title":"System Components","text":""},{"location":"deep-dive/bid-automations/#frontend-interface","title":"Frontend Interface","text":"<p>The \"Automated Bidding\" section in the frontend serves as your control center where you configure which contracts to automate, set the maximum bid amounts you're willing to pay, fund your automation balance with ETH, enable or disable automation per contract, and monitor performance and fund usage. This interface abstracts away all the underlying complexity while giving you full control over your automation settings.</p>"},{"location":"deep-dive/bid-automations/#backend-monitoring-service","title":"Backend Monitoring Service","text":"<p>A backend service runs every minute, continuously scanning all automated contracts across all users. It checks cache utilization and market conditions, applies bidding logic to determine which contracts need bids, and submits batch transactions to the automation contract. This service acts as the brain of the automation system, making intelligent decisions about when and how much to bid.</p>"},{"location":"deep-dive/bid-automations/#smart-contract-system","title":"Smart Contract System","text":"<p>Two contracts work together to handle the automation: the CacheManagerAutomation contract manages user configurations and executes bids, while the BiddingEscrow contract securely holds user funds for automated bidding. This dual-contract architecture ensures both functionality and security.</p>"},{"location":"deep-dive/bid-automations/#how-the-automation-logic-works","title":"How the Automation Logic Works","text":""},{"location":"deep-dive/bid-automations/#cache-utilization-monitoring","title":"Cache Utilization Monitoring","text":"<p>The system activates based on cache utilization levels, but the bidding strategy changes at the 98% threshold. Below 98% utilization, the system places 0 ETH bids - you still need to bid to get cached, but the bid amount is zero since there's available cache space. Above 98% utilization, the system calculates competitive bid amounts based on market conditions.</p> <pre><code>const CACHE_THRESHOLD = 98; // Automation threshold\n\nif (cacheUtilization &lt; 98) {\n  bidAmount = 0; // Bid 0 ETH for free caching\n} else {\n  bidAmount = calculateCompetitiveBid(); // Calculate strategic bid\n}\n</code></pre> <p>This approach ensures you only pay when the cache is actually competitive, while still maintaining your cache position through zero-cost bids when space is available.</p>"},{"location":"deep-dive/bid-automations/#contract-evaluation-process","title":"Contract Evaluation Process","text":"<p>For each automated contract, the system performs a comprehensive evaluation:</p> <ol> <li>Is the contract still deployed? (address validation)</li> <li>Is it already cached? (skip if already in cache)</li> <li>Is automation enabled? (user configuration check)</li> <li>Is there sufficient balance? (escrow funds validation)</li> <li>Does the calculated bid meet requirements? (minimum bid validation)</li> </ol>"},{"location":"deep-dive/bid-automations/#bid-amount-calculation","title":"Bid Amount Calculation","text":"<p>When automation triggers above 98% cache utilization, the system calculates bid amounts with a specific strategy: the bid value is designed to decay down to the minimum bid in approximately one month, based on your contract size and the current decay rate.</p> <pre><code>// Calculate bid that decays to minimum in 30 days\nconst targetDuration = 30 * 24 * 60 * 60; // 30 days in seconds\nconst calculatedBid = minBid + decayRate * targetDuration;\nconst finalBid = Math.min(calculatedBid, userMaxBid);\n</code></pre> <p>This calculation ensures your contract will remain competitively positioned throughout the decay period, giving you roughly a month of cache retention before needing another bid, while still respecting your spending boundaries.</p>"},{"location":"deep-dive/bid-automations/#escrow-and-fund-management","title":"Escrow and Fund Management","text":""},{"location":"deep-dive/bid-automations/#secure-fund-storage","title":"Secure Fund Storage","text":"<p>When you fund your automation, ETH is stored in a secure escrow contract with carefully designed access controls. Only the automation system can withdraw funds for bidding purposes, while you maintain complete control to withdraw unused funds at any time. Your funds are isolated per user with no cross-contamination, ensuring security and preventing any mixing of user balances.</p>"},{"location":"deep-dive/bid-automations/#backend-processing-cycle","title":"Backend Processing Cycle","text":""},{"location":"deep-dive/bid-automations/#every-minute-execution","title":"Every Minute Execution","text":"<p>The automation service follows a systematic process every minute. It begins by fetching all configurations to retrieve automated contracts from all users, then evaluates the current cache state by checking utilization levels. The system applies selection logic to determine which contracts need bids, groups contracts into efficient batches for processing, submits batch bid transactions to the blockchain, and monitors results to track success or failure while handling retries as needed.</p>"},{"location":"deep-dive/bid-automations/#batch-processing-efficiency","title":"Batch Processing Efficiency","text":"<p>Instead of individual transactions, the system employs batch processing for maximum efficiency. It groups up to 50 contracts per batch transaction, significantly reducing gas costs through this batching approach. The system handles failures gracefully with built-in retry logic and provides detailed logging for complete transparency into all operations.</p>"},{"location":"deep-dive/bid-automations/#what-you-configure-vs-what-happens-automatically","title":"What You Configure vs. What Happens Automatically","text":""},{"location":"deep-dive/bid-automations/#your-configuration","title":"Your Configuration","text":"<p>Through the frontend, you set the foundational parameters that guide the automation system. You specify which contract addresses to automate, define maximum bid amounts per contract, control automation enable/disable status for each contract, and provide initial funding for the escrow system.</p>"},{"location":"deep-dive/bid-automations/#automatic-operations","title":"Automatic Operations","text":"<p>The system handles all operational aspects without your intervention. It continuously monitors market conditions and cache utilization, determines optimal bid timing based on cache conditions, calculates appropriate bid amounts within your specified limits, manages transaction execution and gas optimization, tracks fund management and balance updates, and implements comprehensive error handling with retry logic.</p>"},{"location":"deep-dive/bid-automations/#automation-benefits","title":"Automation Benefits","text":""},{"location":"deep-dive/bid-automations/#247-monitoring","title":"24/7 Monitoring","text":"<p>The system provides continuous surveillance of cache conditions, ensuring immediate response when bidding is needed without requiring any manual intervention on your part. This round-the-clock monitoring means you never miss opportunities or face unexpected evictions.</p>"},{"location":"deep-dive/bid-automations/#optimized-timing","title":"Optimized Timing","text":"<p>The automation employs smart activation that only triggers when cache conditions are truly competitive, uses efficient batch processing for significant cost savings, and implements retry logic for failed transactions to ensure reliability.</p>"},{"location":"deep-dive/bid-automations/#risk-management","title":"Risk Management","text":"<p>The system maintains controlled spending within your predefined limits, provides secure fund storage in the escrow contract, and ensures transparent operations with comprehensive logging of all activities.</p>"},{"location":"deep-dive/bid-automations/#best-practices","title":"Best Practices","text":""},{"location":"deep-dive/bid-automations/#funding-strategy","title":"Funding Strategy","text":"<p>Maintain an adequate balance in your escrow, typically 2-3 times your maximum bid amount, to ensure uninterrupted service. Monitor your fund consumption patterns to understand your usage and set up balance alerts for low funds to avoid service interruptions.</p>"},{"location":"deep-dive/bid-automations/#configuration-management","title":"Configuration Management","text":"<p>Start with conservative maximum bid amounts and adjust based on performance data. Enable automation selectively for your most critical contracts only, and review performance regularly to make informed adjustments to your settings.</p>"},{"location":"deep-dive/bid-automations/#cost-optimization","title":"Cost Optimization","text":"<p>Use mid-risk bid amounts for a balanced approach between cost and safety. Monitor cache competition levels and adjust your strategy accordingly, and consider seasonal patterns in cache usage that might affect your bidding strategy.</p>"},{"location":"deep-dive/bid-automations/#see-also","title":"See Also","text":"<ul> <li>Place Bid - Understanding the manual bidding process</li> <li>Bid Suggestions - How optimal bid amounts are calculated</li> <li>Eviction Risk - Monitoring your contract's cache status</li> </ul>"},{"location":"deep-dive/bid-suggestions/","title":"Bid Suggestions","text":"<p>Bid suggestions help you determine the optimal bid amount for your contract's cache slot, balancing cost and eviction risk. The system provides three recommended bid levels, each corresponding to different risk tolerance levels.</p>"},{"location":"deep-dive/bid-suggestions/#what-are-bid-suggestions","title":"What Are Bid Suggestions?","text":"<p>Bid suggestions are recommended bid amounts calculated based on:</p> <ul> <li>Contract size: Larger contracts require higher minimum bids</li> <li>Current cache conditions: Utilization, eviction rate, and competitiveness</li> <li>Risk tolerance: How much you're willing to risk eviction vs. cost</li> </ul>"},{"location":"deep-dive/bid-suggestions/#the-three-risk-levels","title":"The Three Risk Levels","text":"Risk Level Multiplier Description High Risk 1.0x Minimum viable bid (bare minimum to get in the cache) Mid Risk ~1.5x Better chance of staying cached, balanced approach Low Risk ~2.5x Very likely to stay cached, maximum cache retention"},{"location":"deep-dive/bid-suggestions/#how-are-bid-suggestions-calculated","title":"How Are Bid Suggestions Calculated?","text":""},{"location":"deep-dive/bid-suggestions/#step-1-base-calculation","title":"Step 1: Base Calculation","text":"<p>The system starts with the minimum acceptable bid for your contract:</p> <pre><code>// For contract size\nconst minBid = await cacheManager.getMinBid(contractSize);\n\n// For specific contract address\nconst minBid = await cacheManager.getMinBid(contractAddress);\n</code></pre>"},{"location":"deep-dive/bid-suggestions/#step-2-risk-multipliers","title":"Step 2: Risk Multipliers","text":"<p>Base multipliers are applied to the minimum bid:</p> <ul> <li>High Risk: <code>1.0x</code> (always equals minimum bid)</li> <li>Mid Risk: <code>1.5x</code> (base multiplier)</li> <li>Low Risk: <code>2.5x</code> (base multiplier)</li> </ul>"},{"location":"deep-dive/bid-suggestions/#step-3-dynamic-adjustments","title":"Step 3: Dynamic Adjustments","text":"<p>The mid and low risk multipliers are adjusted based on current cache statistics:</p> <pre><code>// Calculate adjustment factors\nconst utilizationFactor = 1 + cacheUtilization;\nconst evictionFactor = 1 + Math.min(evictionRate / 10, 0.5);\nconst competitivenessFactor = 1 + competitiveness;\n\n// Combine factors with weighted importance\nconst combinedAdjustment =\n  utilizationFactor * 0.5 + evictionFactor * 0.3 + competitivenessFactor * 0.2;\n\n// Apply to multipliers (high risk always stays 1.0x)\nmidRisk = baseMidRisk * combinedAdjustment;\nlowRisk = baseLowRisk * combinedAdjustment;\n</code></pre>"},{"location":"deep-dive/bid-suggestions/#cache-statistics-impact","title":"Cache Statistics Impact","text":"<p>The following cache metrics influence bid suggestions:</p>"},{"location":"deep-dive/bid-suggestions/#utilization-0-1","title":"Utilization (0-1)","text":"<ul> <li>What it is: Percentage of total cache space currently in use</li> <li>Impact: Higher utilization \u2192 higher suggested bids</li> <li>Example: 90% utilization means more competition for remaining space</li> </ul>"},{"location":"deep-dive/bid-suggestions/#eviction-rate-events-per-day","title":"Eviction Rate (events per day)","text":"<ul> <li>What it is: Number of contracts evicted from cache per day (last 7 days)</li> <li>Impact: Higher eviction rate \u2192 higher suggested bids</li> <li>Example: 5 evictions/day indicates high competition</li> </ul>"},{"location":"deep-dive/bid-suggestions/#competitiveness-0-1","title":"Competitiveness (0-1)","text":"<ul> <li>What it is: Combined measure of cache pressure</li> <li>Calculation: <code>Math.min((evictionRate / 5) * utilization, 1)</code></li> <li>Impact: Higher competitiveness \u2192 higher suggested bids</li> </ul>"},{"location":"deep-dive/bid-suggestions/#practical-example","title":"Practical Example","text":"<p>Suppose your contract has a minimum bid of <code>1,000,000 wei</code> and current cache conditions are:</p> <ul> <li>Utilization: 80% (0.8)</li> <li>Eviction Rate: 2 evictions/day (0.2)</li> <li>Competitiveness: 0.32</li> </ul> <p>Calculation:</p> <pre><code>utilizationFactor = 1 + 0.8 = 1.8\nevictionFactor = 1 + min(0.2/10, 0.5) = 1.02\ncompetitivenessFactor = 1 + 0.32 = 1.32\n\ncombinedAdjustment = (1.8 * 0.5) + (1.02 * 0.3) + (1.32 * 0.2)\n                   = 0.9 + 0.306 + 0.264 = 1.47\n</code></pre> <p>Suggested Bids:</p> <ul> <li>High Risk: <code>1,000,000 wei</code> (minimum bid)</li> <li>Mid Risk: <code>1,000,000 * 1.5 * 1.47 = 2,205,000 wei</code></li> <li>Low Risk: <code>1,000,000 * 2.5 * 1.47 = 3,675,000 wei</code></li> </ul>"},{"location":"deep-dive/bid-suggestions/#when-are-bid-suggestions-used","title":"When Are Bid Suggestions Used?","text":""},{"location":"deep-dive/bid-suggestions/#for-non-cached-contracts","title":"For Non-Cached Contracts","text":"<p>When your contract is not yet in the cache, the system shows only suggested bids to help you decide how much to bid initially.</p>"},{"location":"deep-dive/bid-suggestions/#for-cached-contracts","title":"For Cached Contracts","text":"<p>When your contract is already cached, suggested bids are used to:</p> <ul> <li>Assess your current eviction risk</li> <li>Recommend rebidding amounts if your effective bid is too low</li> <li>Compare your position against current market conditions</li> </ul>"},{"location":"deep-dive/bid-suggestions/#best-practices","title":"Best Practices","text":"<ul> <li>Start with Mid Risk: Good balance between cost and cache retention</li> <li>Monitor Cache Conditions: Higher utilization periods require higher bids</li> <li>Consider Your Use Case: Critical applications may warrant Low Risk bids</li> </ul>"},{"location":"deep-dive/bid-suggestions/#see-also","title":"See Also","text":"<ul> <li>Effective Bid - Understanding how bids decay over time</li> <li>Eviction Risk - Assessing your contract's risk level</li> <li>Place Bid - How to actually place a bid</li> </ul>"},{"location":"deep-dive/effective-bid/","title":"Effective Bid","text":"<p>The effective bid is the real-time value of a contract's cache slot bid after accounting for time-based decay. It determines whether a contract can retain its cache slot or risks eviction.</p>"},{"location":"deep-dive/effective-bid/#how-is-the-effective-bid-calculated","title":"How is the Effective Bid Calculated?","text":"<p>The effective bid decays over time according to the following formula:</p> <pre><code>effectiveBid = lastBid - (timeElapsed * decayRate)\n</code></pre> <ul> <li>lastBid: The most recent bid amount placed for the contract (in wei)</li> <li>timeElapsed: Seconds since the last bid was placed</li> <li>decayRate: The current decay rate (in wei per second)</li> </ul> <p>If the decay amount exceeds the last bid, the effective bid is set to zero.</p>"},{"location":"deep-dive/effective-bid/#time-decay-bonus-for-new-bids","title":"Time Decay Bonus for New Bids","text":"<p>When you place a new bid, the contract adds a time decay bonus to your bid. This means that for the same nominal bid value, a newer bid is always worth more than an older one, because it includes the current decay amount. This mechanism ensures that new bids are always competitive with decayed older bids.</p> <p>Note: As a user, you only pay the <code>value</code> you specify. The extra \"decay bonus\" is added by the smart contract internally for the purpose of effective bid calculation. You do not pay the bonus amount out of pocket\u2014the contract logic simply makes your bid more competitive by design.</p> <ul> <li>Placing a bid:   The actual bid value used for cache slot competition is:</li> </ul> <pre><code>bid = value + decay\n</code></pre> <p>where <code>decay</code> is the current decay amount at the time of bidding.</p> <ul> <li>Eviction/decay:   Over time, the effective value of all bids decays at the same rate, so only the relative age and size of the bid matter for eviction.</li> </ul> <p>Reference:</p> <ul> <li>Arbitrum CacheManager.sol on GitHub</li> </ul> <p>Example function:</p> <pre><code>/// @dev Converts a value to a bid by adding the time decay term.\nfunction _toBid(uint256 value) internal view returns (uint192 bid) {\n    uint256 _bid = value + _calcDecay();\n    if (_bid &gt; type(uint192).max) {\n        revert BidTooLarge(_bid);\n    }\n    return uint192(_bid);\n}\n</code></pre>"},{"location":"deep-dive/effective-bid/#why-does-it-matter","title":"Why Does It Matter?","text":"<ul> <li>The effective bid is used to determine a contract's position in the cache queue.</li> <li>If your effective bid is outbid by another contract, your contract risks eviction from the cache.</li> <li>Monitoring the effective bid is essential for understanding your place in the cache queue.</li> </ul>"},{"location":"deep-dive/effective-bid/#example-calculation","title":"Example Calculation","text":"<p>Suppose:</p> <ul> <li><code>lastBid = 1,000,000 wei</code></li> <li><code>decayRate = 100 wei/sec</code></li> <li><code>timeElapsed = 3,600 sec</code> (1 hour)</li> </ul> <pre><code>decayAmount = 3,600 * 100 = 360,000 wei\neffectiveBid = 1,000,000 - 360,000 = 640,000 wei\n</code></pre> <p>If the decay amount ever exceeds the last bid, the effective bid is set to <code>0</code>.</p>"},{"location":"deep-dive/effective-bid/#see-also","title":"See Also","text":"<ul> <li>Eviction Risk</li> <li>Bid Suggestions</li> </ul>"},{"location":"deep-dive/eviction-risk/","title":"Eviction Risk","text":"<p>Eviction risk assessment helps you understand how likely your contract is to be evicted from the cache based on its current effective bid compared to market conditions. This is crucial for maintaining cache reliability and avoiding unexpected gas cost increases.</p>"},{"location":"deep-dive/eviction-risk/#what-is-eviction-risk","title":"What is Eviction Risk?","text":"<p>Eviction risk is a measure of how vulnerable your cached contract is to being removed from the cache. It's calculated by comparing your contract's current effective bid against the suggested bid levels for your contract size.</p> <p>Note: Eviction risk is only calculated for contracts that are already cached. Non-cached contracts receive bid suggestions instead.</p>"},{"location":"deep-dive/eviction-risk/#risk-levels-explained","title":"Risk Levels Explained","text":""},{"location":"deep-dive/eviction-risk/#high-risk","title":"\ud83d\udd34 High Risk","text":"<ul> <li>Meaning: Your contract is likely to be evicted soon if the cache becomes competitive</li> <li>When it occurs:</li> <li>Your effective bid is below the minimum bid threshold</li> <li>Your effective bid is above minimum but below the mid-risk threshold</li> <li>Action needed: Set up eviction alerts or bid automation immediately</li> </ul>"},{"location":"deep-dive/eviction-risk/#medium-risk","title":"\ud83d\udfe1 Medium Risk","text":"<ul> <li>Meaning: Your contract has a reasonable chance of staying cached but could be evicted under pressure</li> <li>When it occurs: Your effective bid is between mid-risk and low-risk thresholds</li> <li>Action needed: Monitor closely</li> </ul>"},{"location":"deep-dive/eviction-risk/#low-risk","title":"\ud83d\udfe2 Low Risk","text":"<ul> <li>Meaning: Your contract will likely remain cached even under competitive conditions</li> <li>When it occurs: Your effective bid is above the low-risk threshold</li> <li>Action needed: Continue monitoring, no immediate action needed</li> </ul>"},{"location":"deep-dive/eviction-risk/#how-is-eviction-risk-calculated","title":"How is Eviction Risk Calculated?","text":""},{"location":"deep-dive/eviction-risk/#step-1-calculate-effective-bid","title":"Step 1: Calculate Effective Bid","text":"<pre><code>const effectiveBid = lastBid - timeElapsed * decayRate;\n</code></pre>"},{"location":"deep-dive/eviction-risk/#step-2-get-current-market-thresholds","title":"Step 2: Get Current Market Thresholds","text":"<p>The system calculates what bid amounts would be recommended right now for your contract size:</p> <pre><code>const suggestedBids = {\n  highRisk: minBid, // 1.0x minimum\n  midRisk: minBid * 1.5 * adjustment, // ~1.5x adjusted\n  lowRisk: minBid * 2.5 * adjustment, // ~2.5x adjusted\n};\n</code></pre>"},{"location":"deep-dive/eviction-risk/#step-3-compare-and-assign-risk-level","title":"Step 3: Compare and Assign Risk Level","text":"<pre><code>if (effectiveBid &lt; suggestedBids.highRisk) {\n  riskLevel = 'high';\n} else if (effectiveBid &lt; suggestedBids.midRisk) {\n  riskLevel = 'high'; // Still high risk\n} else if (effectiveBid &lt; suggestedBids.lowRisk) {\n  riskLevel = 'medium';\n} else {\n  riskLevel = 'low';\n}\n</code></pre>"},{"location":"deep-dive/eviction-risk/#understanding-the-results","title":"Understanding the Results","text":"<p>When you view your contract's eviction risk, you'll see:</p>"},{"location":"deep-dive/eviction-risk/#risk-level","title":"Risk Level","text":"<p>Your current risk category (High/Medium/Low)</p>"},{"location":"deep-dive/eviction-risk/#remaining-effective-bid","title":"Remaining Effective Bid","text":"<p>Your contract's current effective bid value in wei</p>"},{"location":"deep-dive/eviction-risk/#current-market-conditions","title":"Current Market Conditions","text":"<p>Cache statistics that influenced the thresholds:</p> <ul> <li>Utilization: How full the cache is</li> <li>Eviction Rate: Recent eviction frequency</li> <li>Competitiveness: Overall market pressure</li> </ul>"},{"location":"deep-dive/eviction-risk/#practical-example","title":"Practical Example","text":"<p>Suppose your contract has:</p> <ul> <li>Last bid: <code>2,000,000 wei</code></li> <li>Placed: 2 hours ago</li> <li>Decay rate: <code>100 wei/sec</code></li> <li>Contract size: <code>1024 bytes</code></li> </ul> <p>Step 1: Calculate effective bid</p> <pre><code>timeElapsed = 2 hours = 7,200 seconds\ndecayAmount = 7,200 * 100 = 720,000 wei\neffectiveBid = 2,000,000 - 720,000 = 1,280,000 wei\n</code></pre> <p>Step 2: Current market thresholds (assuming 1.2x adjustment)</p> <pre><code>highRisk = 1,000,000 wei (minimum bid)\nmidRisk = 1,000,000 * 1.5 * 1.2 = 1,800,000 wei\nlowRisk = 1,000,000 * 2.5 * 1.2 = 3,000,000 wei\n</code></pre> <p>Step 3: Risk assessment</p> <pre><code>effectiveBid (1,280,000) &lt; midRisk (1,800,000)\n\u2192 Risk Level: HIGH\n</code></pre>"},{"location":"deep-dive/eviction-risk/#when-to-take-action","title":"When to Take Action","text":""},{"location":"deep-dive/eviction-risk/#immediate-action-high-risk","title":"Immediate Action (High Risk)","text":"<ul> <li>Set up eviction alerts to be notified when your contract is actually evicted</li> <li>Enable bid automation to automatically maintain your cache position</li> <li>Monitor cache conditions for optimal timing</li> </ul>"},{"location":"deep-dive/eviction-risk/#monitor-closely-medium-risk","title":"Monitor Closely (Medium Risk)","text":"<ul> <li>Check daily for risk level changes</li> <li>Prepare automation setup if risk increases</li> <li>Consider enabling automation during low-competition periods</li> </ul>"},{"location":"deep-dive/eviction-risk/#regular-monitoring-low-risk","title":"Regular Monitoring (Low Risk)","text":"<ul> <li>Check weekly or set up alerts</li> <li>Maintain current strategy unless conditions change dramatically</li> <li>Plan for future automation based on decay timeline</li> </ul>"},{"location":"deep-dive/eviction-risk/#proactive-risk-management","title":"Proactive Risk Management","text":""},{"location":"deep-dive/eviction-risk/#eviction-alerts","title":"Eviction Alerts","text":"<p>Set up alerts to be notified when your contract is actually evicted from the cache, allowing you to respond quickly.</p>"},{"location":"deep-dive/eviction-risk/#bid-automation","title":"Bid Automation","text":"<p>Enable automated bidding to maintain your cache position without manual intervention. This is the most effective way to manage eviction risk.</p>"},{"location":"deep-dive/eviction-risk/#regular-monitoring","title":"Regular Monitoring","text":"<p>Use the dashboard to track your contract's risk level and effective bid decay over time.</p>"},{"location":"deep-dive/eviction-risk/#see-also","title":"See Also","text":"<ul> <li>Effective Bid - Understanding how your bid decays</li> <li>Bid Suggestions - Recommended bid amounts</li> <li>Bid Automations - Automated risk management</li> </ul>"},{"location":"deep-dive/overview/","title":"Deep Dive Overview","text":"<p>The Stylus Cache Manager frontend provides a user-friendly interface for interacting with the underlying cache bidding system, enhanced with additional features like automated bidding and monitoring alerts. These tools help you manage your contract's cache status more effectively than direct contract interaction.</p>"},{"location":"deep-dive/overview/#why-these-topics-matter","title":"Why These Topics Matter","text":"<p>Without proper cache management, your contract risks eviction, leading to slower execution and higher gas costs. While the bidding system itself doesn't prevent eviction, understanding how to use these tools effectively - especially automation - can help maintain your cache position.</p>"},{"location":"deep-dive/overview/#essential-concepts","title":"Essential Concepts","text":""},{"location":"deep-dive/overview/#effective-bid","title":"Effective Bid","text":"<p>Your bid's real-time value after time-based decay. This determines whether your contract stays cached or gets evicted.</p>"},{"location":"deep-dive/overview/#bid-suggestions","title":"Bid Suggestions","text":"<p>Smart recommendations for bid amounts based on three risk levels: High , Mid , and Low multipliers.</p>"},{"location":"deep-dive/overview/#eviction-risk","title":"Eviction Risk","text":"<p>Real-time assessment of your contract's likelihood of eviction, helping you take action before it's too late.</p>"},{"location":"deep-dive/overview/#place-bid","title":"Place Bid","text":"<p>Direct wallet interaction with the CacheManager contract to secure cache slots for your contracts.</p>"},{"location":"deep-dive/overview/#bid-automations","title":"Bid Automations","text":"<p>Automated bidding system that monitors cache conditions and places bids for you, eliminating manual management.</p>"},{"location":"deep-dive/overview/#start-here","title":"Start Here","text":"<p>New to cache bidding? Begin with Effective Bid to understand how the decay system works, then explore Bid Suggestions to learn optimal bidding strategies.</p> <p>Already familiar with manual bidding? Jump to Bid Automations to set up automated cache management.</p>"},{"location":"deep-dive/place-bid/","title":"Place Bid","text":"<p>Placing a bid reserves a cache slot for your contract on Arbitrum. When you use the \"Bid Now\" feature in the frontend, you're making a direct transaction with the CacheManager contract to secure cache space for your contract.</p>"},{"location":"deep-dive/place-bid/#what-happens-when-you-place-a-bid","title":"What Happens When You Place a Bid","text":"<p>When you click \"Place Bid\" in the frontend, the system:</p> <ol> <li>Validates your bid amount against current market conditions</li> <li>Prepares the transaction with the correct parameters</li> <li>Sends the transaction through your wallet to the CacheManager contract</li> <li>Monitors the result and updates your contract's cache status</li> </ol>"},{"location":"deep-dive/place-bid/#the-transaction-flow","title":"The Transaction Flow","text":"<pre><code>Frontend \u2192 Your Wallet \u2192 CacheManager Contract \u2192 Cache Queue\n</code></pre> <p>The frontend handles all the complexity, but ultimately you're calling:</p> <pre><code>function placeBid(address program) external payable\n</code></pre> <p>Where:</p> <ul> <li><code>program</code>: Your contract address</li> <li><code>payable</code>: The ETH amount you're bidding</li> </ul>"},{"location":"deep-dive/place-bid/#bid-amount-selection","title":"Bid Amount Selection","text":""},{"location":"deep-dive/place-bid/#suggested-bid-levels","title":"Suggested Bid Levels","text":"<p>The frontend provides three suggested bid amounts based on current market conditions:</p> <ul> <li>High Risk Bid: The minimum amount needed to get into the cache</li> <li>Mid Risk Bid: A safer amount that's less likely to be outbid</li> <li>Low Risk Bid: The most secure amount for long-term cache retention</li> </ul> <p>These suggestions are calculated using the same logic described in Bid Suggestions.</p>"},{"location":"deep-dive/place-bid/#custom-bid-amounts","title":"Custom Bid Amounts","text":"<p>You can also enter a custom bid amount, but it must be At least the minimum bid for your contract size.</p>"},{"location":"deep-dive/place-bid/#what-happens-after-you-bid","title":"What Happens After You Bid","text":""},{"location":"deep-dive/place-bid/#immediate-effects","title":"Immediate Effects","text":"<ol> <li>Transaction Confirmation: Your bid is recorded on the blockchain</li> <li>Cache Queue Entry: Your contract enters the cache queue</li> <li>Effective Bid Calculation: Your bid starts with a time decay bonus</li> <li>Status Update: The frontend updates to show your contract's new status</li> </ol>"},{"location":"deep-dive/place-bid/#time-decay-bonus","title":"Time Decay Bonus","text":"<p>The CacheManager contract automatically adds a \"decay bonus\" to your bid:</p> <pre><code>actualBid = yourBidAmount + currentDecayAmount\n</code></pre> <p>This ensures your new bid is competitive with older bids that have been decaying. You only pay your bid amount - the bonus is added by the contract logic.</p>"},{"location":"deep-dive/place-bid/#monitoring-your-bid","title":"Monitoring Your Bid","text":""},{"location":"deep-dive/place-bid/#effective-bid-tracking","title":"Effective Bid Tracking","text":"<p>After placing a bid, your effective bid will decay over time:</p> <pre><code>effectiveBid = lastBid - (timeElapsed * decayRate)\n</code></pre>"},{"location":"deep-dive/place-bid/#eviction-risk-assessment","title":"Eviction Risk Assessment","text":"<p>The system continuously monitors your eviction risk by comparing your effective bid to current market thresholds.</p>"},{"location":"deep-dive/place-bid/#rebidding-considerations","title":"Rebidding Considerations","text":"<p>Since manual rebidding isn't practical for active cache management, consider:</p> <ul> <li>Setting up eviction alerts to know when your contract is evicted</li> <li>Enabling bid automation for continuous cache maintenance</li> </ul>"},{"location":"deep-dive/place-bid/#see-also","title":"See Also","text":"<ul> <li>Effective Bid - Understanding how your bid decays over time</li> <li>Bid Suggestions - How the system calculates recommended amounts</li> <li>Bid Automations - Automated bidding for continuous cache management</li> </ul>"},{"location":"getting-started/cache-manager-basics/","title":"\ud83d\udd17 Cache Manager Basics","text":"<p>Welcome! Here's how the Cache Manager helps your contracts run faster, cheaper, and more reliably\u2014plus how to find and use it.</p>"},{"location":"getting-started/cache-manager-basics/#what-is-the-cache-manager","title":"\ud83d\udccb What is the Cache Manager?","text":"<p>The Cache Manager is a core smart contract on Arbitrum that lets you reserve high-speed cache slots for your WASM (Stylus) contracts. Caching your contract means:</p> <ul> <li>Faster execution (no cold-start penalty)</li> <li>Lower gas costs for repeated calls</li> <li>Predictable performance for demanding dApps</li> </ul> <p>But cache space is limited. To get (and keep) a slot, you must bid\u2014and maintain your bid\u2014against others. The Cache Manager enforces these rules and handles slot allocation.</p>"},{"location":"getting-started/cache-manager-basics/#where-is-the-cache-manager","title":"\ud83c\udf10 Where is the Cache Manager?","text":"<p>You interact with the Cache Manager contract directly on-chain. Here's how to find it:</p>"},{"location":"getting-started/cache-manager-basics/#rpc-endpoints","title":"RPC Endpoints","text":"Network RPC Endpoint \ud83d\udfe2 Arbitrum One <code>https://arb1.arbitrum.io/rpc</code> \ud83d\udfe0 Arbitrum Nova <code>https://nova.arbitrum.io/rpc</code> \ud83d\udd35 Arbitrum Sepolia <code>https://sepolia-rollup.arbitrum.io/rpc</code> \ud83c\udfe0 Local (dev/test) <code>http://localhost:8547</code> (usually for nitro-testnode)"},{"location":"getting-started/cache-manager-basics/#get-the-cache-manager-address","title":"\ud83d\udccd Get the Cache Manager Address","text":"<p>You can retrieve the contract address for any network using the CLI:</p> <pre><code>cargo stylus cache status --endpoint=&lt;RPC_ENDPOINT&gt;\n</code></pre> <p>Get Arbitrum Stylus Cli</p> <p>If you dont have stylus-cli yet, you can get it following Arbitrum docs</p>"},{"location":"getting-started/cache-manager-basics/#known-addresses","title":"Known Addresses","text":"Network Cache Manager Address \ud83d\udfe2 Arbitrum One <code>0x51dedbd2f190e0696afbee5e60bfde96d86464ec</code> \ud83d\udfe0 Arbitrum Nova <code>0x20586f83bf11a7cee0a550c53b9dc9a5887de1b7</code> \ud83d\udd35 Arbitrum Sepolia <code>0x0c9043d042ab52cfa8d0207459260040cca54253</code> \ud83c\udfe0 Local (default) <code>0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8</code>"},{"location":"getting-started/cache-manager-basics/#how-does-it-work","title":"\u2699\ufe0f How does it work?","text":"<p>Quick summary</p> <ul> <li>You place a bid to reserve a cache slot for your contract.</li> <li>The Cache Manager tracks all bids and enforces minimums.</li> <li>If someone outbids you (by at least 10%), you risk eviction. - You must keep your bid funded\u2014automation is highly recommended.</li> </ul> <p>For a deeper dive into the economics and automation, see the next sections.</p>"},{"location":"getting-started/cache-manager-basics/#more-information","title":"\ud83d\udcda More information","text":"<ul> <li>Arbitrum Docs: Caching Contracts</li> <li>Cache Manager Source Code (GitHub)</li> </ul> <p>Ready to get hands-on? Let's explore the UI and see how you can take control of your contract's cache slots.</p>"},{"location":"getting-started/stylus-cache-manager-ui/overview/","title":"\ud83d\udda5\ufe0f Stylus Cache Manager UI: Overview","text":"<p>Take control of your contract caching with a modern, intuitive web app. The Stylus Cache Manager UI brings all the tools you need\u2014wallet login, contract management, bidding, automation, alerts, and analytics\u2014together in one place.</p>"},{"location":"getting-started/stylus-cache-manager-ui/overview/#key-features","title":"\ud83d\ude80 Key Features","text":""},{"location":"getting-started/stylus-cache-manager-ui/overview/#what-can-you-do-with-the-ui","title":"What can you do with the UI?","text":"<ul> <li>\ud83d\udd10 Wallet Login: Secure authentication with your Ethereum wallet (sign message)</li> <li>\ud83d\udccb My Contracts: Organize and manage your contracts in one place</li> <li>\ud83d\udcb0 Manual Bidding: Place bids for cache slots directly from the dApp</li> <li>\ud83e\udd16 Automated Bidding: Let the system maintain your cache slot automatically</li> <li>\ud83d\udd14 Alert System: Get notified when your cache slot is at risk</li> <li>\ud83d\udcca Metrics &amp; Analytics: Track cache usage, bid trends, and contract status in real time</li> </ul>"},{"location":"getting-started/stylus-cache-manager-ui/overview/#how-it-works","title":"\ud83c\udfd7\ufe0f How it works","text":"<ul> <li>Frontend: Built with Next.js, React, and RainbowKit for wallet integration. Connects to the backend via REST APIs.</li> <li>Backend: Handles authentication, contract storage, automated bidding logic, alerting, and analytics.</li> <li>Smart Contracts: Automate cache management and secure bidding on-chain.</li> </ul> <p>Curious about a specific feature or workflow? Let us know, and we'll walk you through it or check out the next section for hands-on guides!</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/alerts/","title":"Tutorials","text":"<p>Get started fast! Here's how to use the Stylus Cache Manager UI for the most important actions\u2014step by step, with visuals to guide you.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/alerts/#set-up-alerts","title":"\ud83d\udd14 Set Up Alerts","text":"<p>Stay informed with real-time alerts for key contract events.</p> <p>To start, open the Alert Settings section to configure your preferred notification channels.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/alerts/#step-1-configure-your-notification-channels","title":"Step 1: Configure Your Notification Channels","text":"<p>You can choose from the following options:</p> <ul> <li>Telegram \u2014 Set your Telegram Chat ID and start a conversation with @stylusCmNotifications_bot.</li> <li>Slack \u2014 Provide a valid Slack Webhook URL.</li> <li>Webhook \u2014 Use any compatible Webhook endpoint for custom integrations.</li> </ul> <p>Each channel has a Test button to validate the connection before saving.</p> <p>Once you're done, click Save Alert Settings to apply your global channel configuration.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/alerts/#step-2-enable-alerts-for-a-specific-contract","title":"Step 2: Enable Alerts for a Specific Contract","text":"<p>Select the contract you want to monitor and go to Set Contract Alerts and</p> <p>You\u2019ll see the following alert types:</p> <ul> <li>Eviction \u2014 Notifies you when your contract is evicted from the cache.</li> <li>No Gas \u2014 Alerts you when your gas balance is insufficient for automated bidding.</li> <li>Low Gas \u2014 Triggers when your balance drops below a custom threshold.   \u2192 You can set the threshold manually in ETH.</li> <li>Bid Safety \u2014 Warns you when the minimum bid approaches your current bid.   \u2192 Use the slider to adjust the sensitivity.</li> </ul> <p>For each alert type, select the channels where you want to receive notifications:</p> <ul> <li>Telegram</li> <li>Slack</li> <li>Webhook</li> </ul> <p>When finished, click Save Alert Settings to confirm your preferences for that contract.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/bid-automation/","title":"Tutorials","text":"<p>Get started fast! Here's how to use the Stylus Cache Manager UI for the most important actions\u2014step by step, with visuals to guide you.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/bid-automation/#bid-automation","title":"\u2699\ufe0f Bid Automation","text":"<p>Automated bidding keeps your contract cached without manual intervention. To get started, go to My Contracts and select the contract you want to automate.</p> <p>Enter the amount of ETH to deposit into the automation balance. This balance will be used to place bids automatically on your behalf. You can enter <code>0</code> if you prefer to fund it later (via the Gas Tank in the navbar) or if your balance already has sufficient funds.</p> <p>Define the highest amount the system is allowed to bid on your behalf.</p> <p>Click \u201cSet Automation\u201d. Once confirmed, your contract will auto-bid to maintain its position.</p> <p>When your configuration meets the bidding conditions, the backend will trigger the Cache Manager Automation (CMA) contract to place a bid on your behalf. The bid amount will be deducted from your automation balance, and your contract will be cached automatically.</p> <p>You can view your automation balance in the Automation tab or under the Gas Tank section in the navbar.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/gas-tank/","title":"Tutorials","text":"<p>Get started fast! Here's how to use the Stylus Cache Manager UI for the most important actions\u2014step by step, with visuals to guide you.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/gas-tank/#manage-gas-tank","title":"\u26fd Manage Gas Tank","text":"<p>The Gas Tank holds the ETH balance used for automated bidding transactions.</p> <p>To deposit funds, open the Gas Tank from the navbar.</p> <p>Enter the amount of ETH you want to deposit. This balance will be used when the automation logic places a bid on your behalf.</p> <p>Click Deposit Gas and confirm the transaction in your wallet.</p> <p>After the transaction is confirmed, your updated balance will be reflected in the Gas Tank.</p> <p>To withdraw your funds, switch to the Withdraw tab\u2014you can withdraw the full balance at any time.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/login-wallet/","title":"Tutorials","text":"<p>Get started fast! Here's how to use the Stylus Cache Manager UI for the most important actions\u2014step by step, with visuals to guide you.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/login-wallet/#login-with-wallet","title":"\ud83d\udd10 Login with Wallet","text":"<p>Open the Stylus Cache Manager web app.</p> <p>Click the Connect Wallet button in the top right corner.</p> <p>Select your wallet provider (e.g., MetaMask, WalletConnect).</p> <p>Approve the connection in your wallet popup.</p> <p>When prompted, sign the authentication message to log in securely.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/my-contracts/","title":"Tutorials","text":"<p>Get started fast! Here's how to use the Stylus Cache Manager UI for the most important actions\u2014step by step, with visuals to guide you.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/my-contracts/#add-a-contract-to-my-contracts","title":"\ud83d\udccb Add a Contract to \"My Contracts\"","text":"<p>After logging in, go to the My Contracts section from the navbar and Click + Add Contract button.</p> <p>Enter your contract address</p> <p>and (optionally) a label or description.</p> <p>Click Add Contract. The contract will now appear in your list.</p> <p>When clicking a contract, details panel will show up</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/place-bid/","title":"Tutorials","text":"<p>Get started fast! Here's how to use the Stylus Cache Manager UI for the most important actions\u2014step by step, with visuals to guide you.</p>"},{"location":"getting-started/stylus-cache-manager-ui/tutorials/place-bid/#place-a-bid","title":"\ud83d\udcb0 Place a Bid","text":"<p>In My Contracts, select the contract you want to manage.</p> <p>When clicking bid secion, suggestions will popup. Sometimes getting your contract cached can be free!</p> <p>Enter your bid amount in Bid Now section click \"Place Bid\" and confirm the transaction details.</p> <p>Wait for confirmation and the UI will update your contract's cache status.</p>"},{"location":"local-deployment/arbitrum/arbitrum-chains/","title":"Arbitrum Chains","text":"<p>Complete reference for all Arbitrum chains with RPC endpoints, Cache Manager addresses, and essential configuration data.</p>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#chain-information","title":"Chain Information","text":"Arbitrum OneArbitrum NovaArbitrum SepoliaLocal Testnode"},{"location":"local-deployment/arbitrum/arbitrum-chains/#network-details","title":"Network Details","text":"<pre><code>CHAIN_ID: 42161\nNETWORK_NAME: Arbitrum One\nCURRENCY: ETH\nTECH_STACK: Nitro (Rollup)\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#rpc-endpoints","title":"RPC Endpoints","text":"<pre><code>HTTP_RPC: https://arb1.arbitrum.io/rpc\nWEBSOCKET_RPC: wss://arb1-feed.arbitrum.io/feed\nSEQUENCER_ENDPOINT: https://arb1-sequencer.arbitrum.io/rpc\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#cache-manager","title":"Cache Manager","text":"<pre><code>CACHE_MANAGER: 0x51dedbd2f190e0696afbee5e60bfde96d86464ec\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#precompiles","title":"Precompiles","text":"<pre><code>ARBWASM_PRECOMPILE: 0x0000000000000000000000000000000000000071\nARBWASMCACHE_PRECOMPILE: 0x0000000000000000000000000000000000000072\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#block-explorers","title":"Block Explorers","text":"<ul> <li>Arbiscan: https://arbiscan.io/</li> <li>Blockscout: https://arbitrum.blockscout.com/</li> </ul>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#network-details_1","title":"Network Details","text":"<pre><code>CHAIN_ID: 42170\nNETWORK_NAME: Arbitrum Nova\nCURRENCY: ETH\nTECH_STACK: Nitro (AnyTrust)\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#rpc-endpoints_1","title":"RPC Endpoints","text":"<pre><code>HTTP_RPC: https://nova.arbitrum.io/rpc\nWEBSOCKET_RPC: wss://nova-feed.arbitrum.io/feed\nSEQUENCER_ENDPOINT: https://nova-sequencer.arbitrum.io/rpc\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#cache-manager_1","title":"Cache Manager","text":"<pre><code>CACHE_MANAGER: 0x20586f83bf11a7cee0a550c53b9dc9a5887de1b7\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#precompiles_1","title":"Precompiles","text":"<pre><code>ARBWASM_PRECOMPILE: 0x0000000000000000000000000000000000000071\nARBWASMCACHE_PRECOMPILE: 0x0000000000000000000000000000000000000072\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#block-explorers_1","title":"Block Explorers","text":"<ul> <li>Arbiscan: https://nova.arbiscan.io/</li> <li>Blockscout: https://arbitrum-nova.blockscout.com/</li> </ul>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#network-details_2","title":"Network Details","text":"<pre><code>CHAIN_ID: 421614\nNETWORK_NAME: Arbitrum Sepolia (Testnet)\nCURRENCY: ETH\nTECH_STACK: Nitro (Rollup)\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#rpc-endpoints_2","title":"RPC Endpoints","text":"<pre><code>HTTP_RPC: https://sepolia-rollup.arbitrum.io/rpc\nWEBSOCKET_RPC: wss://sepolia-rollup.arbitrum.io/feed\nSEQUENCER_ENDPOINT: https://sepolia-rollup-sequencer.arbitrum.io/rpc\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#cache-manager_2","title":"Cache Manager","text":"<pre><code>CACHE_MANAGER: 0x0c9043d042ab52cfa8d0207459260040cca54253\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#precompiles_2","title":"Precompiles","text":"<pre><code>ARBWASM_PRECOMPILE: 0x0000000000000000000000000000000000000071\nARBWASMCACHE_PRECOMPILE: 0x0000000000000000000000000000000000000072\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#block-explorers_2","title":"Block Explorers","text":"<ul> <li>Arbiscan: https://sepolia.arbiscan.io/</li> <li>Blockscout: https://arbitrum-sepolia.blockscout.com/</li> </ul>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#faucets","title":"Faucets","text":"<ul> <li>Sepolia ETH Faucet: [Placeholder - Add faucet URL]</li> <li>Arbitrum Sepolia Faucet: [Placeholder - Add faucet URL]</li> </ul>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#network-details_3","title":"Network Details","text":"<pre><code>CHAIN_ID: 412346\nNETWORK_NAME: Local Arbitrum Testnode\nCURRENCY: ETH\nTECH_STACK: Nitro (Rollup)\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#rpc-endpoints_3","title":"RPC Endpoints","text":"<pre><code>HTTP_RPC: http://localhost:8547\nWEBSOCKET_RPC: ws://localhost:8548\nL1_RPC: http://localhost:8545\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#cache-manager_3","title":"Cache Manager","text":"<pre><code>CACHE_MANAGER: 0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#precompiles_3","title":"Precompiles","text":"<pre><code>ARBWASM_PRECOMPILE: 0x0000000000000000000000000000000000000071\nARBWASMCACHE_PRECOMPILE: 0x0000000000000000000000000000000000000072\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#prefunded-accounts","title":"Prefunded Accounts","text":"<pre><code># Main prefunded account\nADDRESS: 0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\nPRIVATE_KEY: 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\n\n# L2 Owner account\nL2_OWNER_ADDRESS: 0x5E1497dD1f08C87b2d8FE23e9AAB6c1De833D927\nL2_OWNER_PRIVATE_KEY: 0xdc04c5399f82306ec4b4d654a342f40e2e0620fe39950d967e1e574b32d4dd36\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#core-contracts","title":"Core Contracts","text":"<pre><code>ROLLUP_PROXY: 0x7d98BA231d29D5C202981542C0291718A7358c63\nINBOX_PROXY: 0x9f8c1c641336A371031499e3c362e40d58d0f254\nBRIDGE_PROXY: 0x5eCF728ffC5C5E802091875f96281B5aeECf6C49\nSEQUENCER_INBOX: 0x18d19C5d3E685f5be5b9C86E097f0E439285D216\n</code></pre>"},{"location":"local-deployment/arbitrum/arbitrum-chains/#environment-variables-setup","title":"Environment Variables Setup","text":""},{"location":"local-deployment/arbitrum/arbitrum-chains/#quick-setup-commands","title":"Quick Setup Commands","text":"Arbitrum OneArbitrum NovaArbitrum SepoliaLocal Testnode <pre><code>export RPC=\"https://arb1.arbitrum.io/rpc\"\nexport CM_ADDRESS=\"0x51dedbd2f190e0696afbee5e60bfde96d86464ec\"\n</code></pre> <pre><code>export RPC=\"https://nova.arbitrum.io/rpc\"\nexport CM_ADDRESS=\"0x20586f83bf11a7cee0a550c53b9dc9a5887de1b7\"\n</code></pre> <pre><code>export RPC=\"https://sepolia-rollup.arbitrum.io/rpc\"\nexport CM_ADDRESS=\"0x0c9043d042ab52cfa8d0207459260040cca54253\"\n</code></pre> <pre><code>export RPC=\"http://localhost:8547\"\nexport CM_ADDRESS=\"0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8\"\nexport RPC_L1=\"http://localhost:8545\"\n\n# Prefunded accounts\nexport ARBPRE_ADD=\"0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\"\nexport ARBPRE_PK=\"0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\"\nexport ARBLOC_OWNER_PK=\"0xdc04c5399f82306ec4b4d654a342f40e2e0620fe39950d967e1e574b32d4dd36\"\n</code></pre> <p>Warning</p> <p>\"Security Notice\" - Local testnode keys are for development only - Never use testnet keys in production - Always use environment variables for sensitive data</p>"},{"location":"local-deployment/arbitrum/deployment/","title":"Arbitrum Local Testnode Deployment","text":"<p>The nitro-testnode provides a complete environment for local Arbitrum testing, including a dev-mode Geth L1 and multiple Nitro instances with different roles. This setup supports the latest Arbitrum features including Stylus smart contracts.</p>"},{"location":"local-deployment/arbitrum/deployment/#prerequisites","title":"Prerequisites","text":"<p>Before running the testnode, ensure you have the following installed:</p> <ul> <li>bash shell</li> <li>docker and docker-compose</li> </ul> <p>All tools must be available in your PATH.</p>"},{"location":"local-deployment/arbitrum/deployment/#quick-start","title":"Quick Start","text":""},{"location":"local-deployment/arbitrum/deployment/#1-clone-the-repository","title":"1\ufe0f\u20e3 Clone the Repository","text":"<pre><code>git clone -b release --recurse-submodules https://github.com/OffchainLabs/nitro-testnode.git\ncd nitro-testnode\n</code></pre>"},{"location":"local-deployment/arbitrum/deployment/#2-initialize-and-start-the-node","title":"2\ufe0f\u20e3 Initialize and Start the Node","text":"<pre><code>./test-node.bash --init\n</code></pre> <p>This command will:</p> <ul> <li>Download and set up the necessary Docker images</li> <li>Initialize the blockchain state</li> <li>Start the local Arbitrum testnode</li> </ul>"},{"location":"local-deployment/arbitrum/deployment/#3-access-the-testnode","title":"3\ufe0f\u20e3 Access the Testnode","text":"<p>Once running, the sequencer container provides access to the testchain:</p> <ul> <li>HTTP RPC: <code>http://localhost:8547</code></li> <li>WebSocket RPC: <code>ws://localhost:8548</code></li> </ul>"},{"location":"local-deployment/arbitrum/deployment/#available-options","title":"Available Options","text":"<p>To see all available configuration options:</p> <pre><code>./test-node.bash --help\n</code></pre>"},{"location":"local-deployment/arbitrum/deployment/#important-notes","title":"Important Notes","text":"<ul> <li>The testnode runs with a local L1 (Geth) in development mode</li> <li>All accounts and contracts are pre-funded for testing</li> <li>The blockchain state resets each time the testnode is restarted</li> <li>This is intended for local development and testing only</li> </ul>"},{"location":"local-deployment/arbitrum/deployment/#node-data-and-configuration","title":"Node Data and Configuration","text":"<p>For detailed information about accounts, contracts, and network configuration, see the Test Node Data section.</p>"},{"location":"local-deployment/arbitrum/deployment/#further-reading","title":"Further Reading","text":"<p>For comprehensive documentation, advanced configuration options, and troubleshooting:</p> <ul> <li>Official Repository: https://github.com/OffchainLabs/nitro-testnode</li> <li>Nitro Documentation: https://github.com/OffchainLabs/nitro</li> </ul>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/","title":"Install Cargo Stylus","text":""},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#install-cargo-cli","title":"\ud83d\ude80 Install Cargo CLI","text":""},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#1-install-rust-stylus-cli","title":"1\ufe0f\u20e3 Install Rust &amp; Stylus CLI","text":"<p>Install Rust and then install the Stylus CLI tool:</p> <pre><code>cargo install --force cargo-stylus cargo-stylus-check\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#2-add-wasm-target","title":"2\ufe0f\u20e3 Add Wasm Target","text":"<pre><code>rustup target add wasm32-unknown-unknown\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#3-initialize-deploy-a-contract","title":"3\ufe0f\u20e3 Initialize &amp; Deploy a Contract","text":"<pre><code>RPC=http://localhost:8547\nARB_PREFUNDED_PK=0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\ncargo stylus new counterTest --minimal\ncd counterTest\ncargo stylus check --endpoint $RPC\ncargo stylus deploy --endpoint $RPC --private-key $ARB_PREFUNDED_PK --no-verify\n</code></pre> <p>Cached Bytecode Uniqueness</p> <p>Cached bytecode is unique - if several addresses share the same bytecode, it's cached only once. If you want to cache several bytecodes for testing, we suggest modifying the source code slightly.</p> <pre><code>Modify `src/lib.rs` before deployment, e.g., add a function:\n```rust\n/// Sets a number in storage to a user-specified value.\npub fn set_number_version_1(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n```\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#place-a-bid-using-cargo-cli","title":"\ud83d\udcb0 Place a Bid using Cargo CLI","text":""},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#basic-bid-placement","title":"Basic Bid Placement","text":"<pre><code># Replace SC_ADD with your contract address\nexport SC_ADD=\ncargo stylus cache bid $SC_ADD 0 --private-key $ARB_PREFUNDED_PK --endpoint $RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#cache-your-contract","title":"Cache Your Contract","text":"<p>After deploying your contract, you can cache it with:</p> <pre><code># Cache your activated contract in ArbOS\ncargo stylus cache bid $SC_ADD 0 --private-key $ARB_PREFUNDED_PK --endpoint $RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#additional-cache-commands","title":"Additional Cache Commands","text":"<pre><code># Check cache status\ncargo stylus cache status --endpoint $RPC\n\n# Check specific contract cache status\ncargo stylus cache status --endpoint $RPC --address $SC_ADD\n\n# Get bid suggestions\ncargo stylus cache suggest-bid $SC_ADD --endpoint $RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cargo-stylus/#further-reading","title":"\ud83d\udcda Further Reading","text":"<p>For more information about the Stylus contract cache system:</p> <ul> <li>Stylus Cache Manager Documentation: https://docs.arbitrum.io/stylus/concepts/stylus-cache-manager</li> <li>Arbitrum Stylus Documentation: https://docs.arbitrum.io/stylus/</li> </ul> <p>Having troubles installing Stylus?</p> <p>Check the Arbitrum Stylus CLI documentation for detailed installation instructions and troubleshooting.</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/","title":"\u2699\ufe0f Cache Manager Interactions Guide","text":"<p>This guide covers two ways to interact with Arbitrum's Cache Manager: Cargo Stylus CLI for streamlined contract management and Foundry for direct contract interactions.</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#interaction-methods","title":"\ud83d\udccb Interaction Methods","text":""},{"location":"local-deployment/arbitrum/playground/cm-interactions/#cargo-stylus-cli","title":"\ud83d\udd27 Cargo Stylus CLI","text":"<p>High-level commands for contract lifecycle management and cache operations.</p> <p>Best for: Contract deployment, quick status checks, streamlined bidding</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#foundry-direct-contract-interaction","title":"\ud83d\udee0\ufe0f Foundry (Direct Contract Interaction)","text":"<p>Direct access to CacheManager contract through <code>cast</code> commands.</p> <p>Best for: Advanced operations, custom bidding strategies, administrative functions</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#contract-deployment-activation","title":"\ud83d\ude80 Contract Deployment &amp; Activation","text":""},{"location":"local-deployment/arbitrum/playground/cm-interactions/#check-contract-before-deployment","title":"Check Contract Before Deployment","text":"<pre><code>cargo stylus check\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#deploy-contract","title":"Deploy Contract","text":"<pre><code>cargo stylus deploy --private-key $ACC_PK --no-verify --endpoint=$RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#activate-contract","title":"Activate Contract","text":"<pre><code>cargo stylus activate --private-key $ACC_PK --address=$SC_ADD --endpoint=$RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#cache-status-monitoring","title":"\ud83d\udcca Cache Status &amp; Monitoring","text":""},{"location":"local-deployment/arbitrum/playground/cm-interactions/#check-overall-cache-status","title":"Check Overall Cache Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#check-specific-contract-status","title":"Check Specific Contract Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC --address=$SC_ADD\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#cache-bidding-operations","title":"\ud83d\udcb0 Cache Bidding Operations","text":""},{"location":"local-deployment/arbitrum/playground/cm-interactions/#get-bid-suggestions","title":"Get Bid Suggestions","text":"<p>Cargo Stylus CLI:</p> <pre><code>cargo stylus cache suggest-bid $SC_ADD --endpoint=$RPC\n</code></pre> <p>Foundry:</p> <pre><code>cast from-wei $(cast call $CM_ADDRESS \"getMinBid(address)(uint256)\" $SC_ADD --rpc-url $RPC)\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#place-a-bid","title":"Place a Bid","text":"<p>Cargo Stylus CLI:</p> <pre><code>cargo stylus cache bid $SC_ADD $(cast to-wei 0.1) --private-key $ACC_PK --endpoint=$RPC\n</code></pre> <p>Foundry:</p> <pre><code>cast send $CM_ADDRESS \"placeBid(address)\" $SC_ADD --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.1)\n</code></pre> <p>Error Handling</p> <p>If an error occurs during bidding, decode it for details:</p> <pre><code>```bash\ncast decode-error &lt;ERROR_CODE&gt;\n</code></pre> <p>```</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#admin-operations","title":"\ud83d\udee0\ufe0f Admin Operations","text":""},{"location":"local-deployment/arbitrum/playground/cm-interactions/#set-cache-size","title":"Set Cache Size","text":"<pre><code>cast send $CM_ADDRESS \"setCacheSize(uint64)\" 3000000 --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#set-cache-decay-rate","title":"Set Cache Decay Rate","text":"<pre><code>cast send $CM_ADDRESS \"setDecayRate(uint64)\" 0 --rpc-url $ARBLOC_RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#evict-all-cached-contracts","title":"Evict All Cached Contracts","text":"<pre><code>cast send $CM_ADDRESS \"evictAll()\" --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#evict-k-contracts","title":"Evict K Contracts","text":"<pre><code>export K=1\ncast send $CM_ADDRESS \"evictPrograms(uint256)\" $K --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#cache-inspection","title":"\ud83d\udcdc Cache Inspection","text":""},{"location":"local-deployment/arbitrum/playground/cm-interactions/#get-individual-cache-entry","title":"Get Individual Cache Entry","text":"<pre><code>export K=0\ncast call $CM_ADDRESS \"entries(uint256)(address code,uint256 size,uint256 bid)\" $K --rpc-url $RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#get-all-cache-entries","title":"Get All Cache Entries","text":"<pre><code>cast call $CM_ADDRESS \"getEntries()\" --rpc-url $RPC\n</code></pre> <p>May crash if cache is too large</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#get-smallest-bid-entries","title":"Get Smallest Bid Entries","text":"<pre><code>export K=10\ncast call $CM_ADDRESS \"getSmallestEntries(uint256)\" $K --rpc-url $RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#environment-variables","title":"\ud83d\udd27 Environment Variables","text":"<pre><code>export ACC_PK=\"your_account_private_key\"\nexport SC_ADD=\"your_contract_address\"\nexport CM_ADDRESS=\"cache_manager_contract_address\"\nexport RPC=\"your_rpc_endpoint\"\nexport ARBLOC_OWNER_PK=\"arbitrum_owner_private_key\"  # Admin only\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#method-selection","title":"\ud83c\udfaf Method Selection","text":"<p>Use Cargo Stylus CLI for: Contract lifecycle, streamlined commands, cache bidding</p> <p>Use Foundry for: Direct contract control, custom logic, admin operations</p>"},{"location":"local-deployment/arbitrum/playground/cm-interactions/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>Guided Testing - Step-by-step testing workflow</li> <li>Cargo Stylus - Detailed CLI documentation</li> </ul>"},{"location":"local-deployment/arbitrum/playground/guided-testing/","title":"\ud83d\ude80 Guided Testing Workflow","text":"<p>This guide walks you through deploying and caching contracts on your local Arbitrum testnode, demonstrating both Stylus and Foundry approaches with practical examples.</p>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<p>Ensure you have set up the required environment variables:</p> <pre><code>export ACC_PK=\"0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\"\nexport RPC=\"http://localhost:8547\"\nexport CM_ADDRESS=\"0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8\"\nexport ARBLOC_OWNER_PK=\"0xdc04c5399f82306ec4b4d654a342f40e2e0620fe39950d967e1e574b32d4dd36\"\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#test-scenario-1-basic-contract-deployment","title":"\ud83d\udcdd Test Scenario 1: Basic Contract Deployment","text":""},{"location":"local-deployment/arbitrum/playground/guided-testing/#deploy-stylus-contract","title":"Deploy Stylus Contract","text":"<p>Navigate to the counter test project:</p> <pre><code>cargo stylus new counterTest --minimal\ncd counterTest\ncargo stylus check --endpoint $RPC\ncargo stylus deploy --endpoint $RPC --private-key $ARB_PREFUNDED_PK --no-verify\n</code></pre> <p>Deploy the contract:</p> <pre><code>cargo stylus deploy --private-key $ACC_PK --no-verify --endpoint=$RPC\n</code></pre> <p>Set the contract address:</p> <pre><code>export SC_ADD=&lt;CONTRACT_ADDRESS&gt;\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#cache-the-contract","title":"Cache the Contract","text":"<p>Cargo Stylus CLI</p> <pre><code>cargo stylus cache bid $SC_ADD $(cast to-wei 0.001) --private-key $ACC_PK --endpoint=$RPC\n</code></pre> <p>Foundry</p> <pre><code>cast send $CM_ADDRESS \"placeBid(address)\" $SC_ADD --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.1)\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#test-scenario-2-cache-competition","title":"\ud83d\udcdd Test Scenario 2: Cache Competition","text":"<p>This scenario demonstrates how contract eviction works when cache space is limited.</p>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#setup-limited-cache","title":"Setup Limited Cache","text":"<p>Set cache size to 2.1MB:</p> <pre><code>cast send $CM_ADDRESS \"setCacheSize(uint64)\" 2100000 --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre> <p>Clear existing cache:</p> <pre><code>cast send $CM_ADDRESS \"evictAll()\" --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#deploy-multiple-contracts","title":"Deploy Multiple Contracts","text":"<p>Deploy three contract variations by modifying the function name in <code>counterTest/src/lib.rs</code>:</p> <p>Version 0:</p> <pre><code>pub fn set_number_version_0(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre> <p>Version 1:</p> <pre><code>pub fn set_number_version_1(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre> <p>Version 2:</p> <pre><code>pub fn set_number_version_2(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre> <p>Deploy each version:</p> <pre><code>cargo stylus deploy --private-key $ACC_PK --no-verify --endpoint=$RPC\n</code></pre> <p>Save addresses:</p> <pre><code>export SC_ADD_0=&lt;ADDRESS_0&gt;\nexport SC_ADD_1=&lt;ADDRESS_1&gt;\nexport SC_ADD_2=&lt;ADDRESS_2&gt;\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#test-cache-competition","title":"Test Cache Competition","text":"<p>Cache first contract (low bid):</p> <pre><code>cast send $CM_ADDRESS \"placeBid(address)\" $SC_ADD_0 --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.001)\n</code></pre> <p>Cache second contract (higher bid):</p> <pre><code>cast send $CM_ADDRESS \"placeBid(address)\" $SC_ADD_1 --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.05)\n</code></pre> <p>Try to cache third contract (no bid - will fail):</p> <pre><code>cast send $CM_ADDRESS \"placeBid(address)\" $SC_ADD_2 --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0)\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#handle-eviction","title":"Handle Eviction","text":"<p>Get suggested bid for third contract:</p> <pre><code>cargo stylus cache suggest-bid $SC_ADD_2 --endpoint=$RPC\n</code></pre> <p>Bid with suggested amount:</p> <pre><code>cast send $CM_ADDRESS \"placeBid(address)\" $SC_ADD_2 --rpc-url $RPC --private-key $ACC_PK --value 1000000000000000\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#verify-results","title":"Verify Results","text":"<p>Check final cache status:</p> <pre><code>cargo stylus cache status --endpoint=$RPC --address=$SC_ADD_0\ncargo stylus cache status --endpoint=$RPC --address=$SC_ADD_1\ncargo stylus cache status --endpoint=$RPC --address=$SC_ADD_2\n</code></pre> <p>Expected Result: The lowest bid (SC_ADD_0) gets evicted to make room for SC_ADD_2.</p>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#common-testing-commands","title":"\ud83d\udcca Common Testing Commands","text":""},{"location":"local-deployment/arbitrum/playground/guided-testing/#check-cache-status","title":"Check Cache Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#get-bid-suggestions","title":"Get Bid Suggestions","text":"<pre><code>cargo stylus cache suggest-bid $SC_ADD --endpoint=$RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#decode-errors","title":"Decode Errors","text":"<pre><code>cast decode-error &lt;ERROR_CODE&gt;\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#view-cache-entries","title":"View Cache Entries","text":"<pre><code>cast call $CM_ADDRESS \"getEntries()\" --rpc-url $RPC\n</code></pre>"},{"location":"local-deployment/arbitrum/playground/guided-testing/#see-also","title":"\ud83d\udcda See Also","text":"<ul> <li>CM Interactions - Detailed command reference</li> <li>Cargo Stylus - CLI documentation</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/","title":"\ud83d\udce6 Clone the Repository","text":"<p>Set up your development environment by cloning the Stylus Cache Manager repository with all its submodules and dependencies.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#repository-structure","title":"\ud83d\udd17 Repository Structure","text":"<p>The Stylus Cache Manager project consists of several interconnected components:</p> <ul> <li>\ud83d\udce6 Main Repository: Deployment scripts and configuration</li> <li>\ud83d\udd27 Smart Contracts: Cache Manager Automation contracts</li> <li>\ud83e\udd16 Backend API: RESTful service for cache management</li> <li>\ud83d\udda5\ufe0f Frontend UI: Next.js web application</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#quick-clone-recommended","title":"\ud83d\ude80 Quick Clone (Recommended)","text":"<p>Clone the repository with all submodules in one command:</p> <pre><code>git clone --recurse-submodules https://github.com/cobuilders-xyz/stylus-cm-deploy\ncd stylus-cm-deploy\n</code></pre> <p>All-in-One Setup</p> <p>This command automatically downloads all submodules and their dependencies, giving you a complete development environment.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#alternative-clone-without-submodules","title":"\ud83d\udd04 Alternative: Clone Without Submodules","text":"<p>If you've already cloned without submodules, you can initialize them afterward:</p> <pre><code># If you already cloned without --recurse-submodules\ngit clone https://github.com/cobuilders-xyz/stylus-cm-deploy\ncd stylus-cm-deploy\n\n# Initialize and pull submodules\ngit submodule update --init --recursive\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#install-dependencies","title":"\ud83d\udce6 Install Dependencies","text":""},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#option-1-automated-setup-recommended","title":"Option 1: Automated Setup (Recommended)","text":"<p>Use the provided npm script to install all dependencies:</p> <pre><code>npm run submodules:init\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#option-2-manual-installation","title":"Option 2: Manual Installation","text":"<p>If you prefer manual control, install dependencies for each submodule:</p> <pre><code># Backend dependencies\ncd submodules/stylus-cm-backend\nnpm install\n\n# Frontend dependencies\ncd ../stylus-cm-frontend\nnpm install\n\n# Smart contracts dependencies\ncd ../stylus-cm-contracts\nnpm install\n\n# Return to root directory\ncd ../../\n</code></pre> <p>Dependency Management</p> <p>The automated script ensures all submodules are properly initialized with their required dependencies. Use this approach for consistent setup across different environments.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/clone-the-repo/#next-steps","title":"\ud83d\udd27 Next Steps","text":"<p>With your repository cloned and dependencies installed, you're ready to:</p> <ol> <li>Deploy CMA Contracts - Deploy smart contracts to your chosen network</li> <li>Configure ThirdWeb Engine - Set up automation services</li> <li>SCM UI Backend - Configure the backend API</li> </ol>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/","title":"\ud83d\udce6 Deploy CMA Contracts","text":"<p>Deploy Cache Manager Automation smart contracts to enable automated bidding functionality for your Stylus contracts.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#what-are-cma-contracts","title":"\ud83c\udfaf What Are CMA Contracts?","text":"<p>The Cache Manager Automation (CMA) contracts provide the smart contract foundation for:</p> <ul> <li>\ud83e\udd16 Automated Bidding: Execute bids automatically based on configured rules</li> <li>\ud83d\udcb0 Bid Management: Handle bid placement, updates, and withdrawals</li> <li>\ud83d\udd12 Security: Secure automation logic with proper access controls</li> <li>\ud83d\udcca Monitoring: Track bid status and automation performance</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#supported-networks","title":"\ud83c\udf10 Supported Networks","text":"<p>The deployment scripts support multiple Arbitrum networks:</p> Network Environment Use Case \ud83c\udfe0 Local Testnode Development Local testing and development \ud83d\udd35 Arbitrum Sepolia Staging Integration testing \ud83d\udfe2 Arbitrum One Production Live production deployment <p>We also suport any kind of Arbitrum Orbit Chain that has their Cache Manager contract deployed.</p> <p>Network Selection</p> <p>In this guide we will be using Arbitrum Sepolia and Arbitrum Local Testnode.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#configuration-setup","title":"\u2699\ufe0f Configuration Setup","text":""},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#1-navigate-to-contracts-directory","title":"1. Navigate to Contracts Directory","text":"<pre><code>cd submodules/stylus-cm-contracts\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#2-environment-configuration","title":"2. Environment Configuration","text":"<p>Copy the example environment file and configure your deployment settings:</p> <pre><code>cp .env.example .env\n</code></pre> <p>Edit the <code>.env</code> file with your network-specific configuration:</p> <pre><code># Sepolia configuration (optional)\nARB_SEPOLIA_FUNDED_ADDRESS=your_sepolia_wallet_address\nARB_SEPOLIA_FUNDED_PK=your_sepolia_private_key\n\n# Local testnode configuration (optional)\nARB_LOCAL_FUNDED_ADDRESS=your_sepolia_wallet_address\nARB_LOCAL_FUNDED_PK=your_local_private_key\n</code></pre> <p>Private Key Security</p> <p>Never commit your <code>.env</code> file to version control. Ensure it's listed in <code>.gitignore</code>.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#deployment-commands","title":"\ud83d\ude80 Deployment Commands","text":""},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#local-testnode-deployment","title":"Local Testnode Deployment","text":"<p>Deploy to your local Arbitrum testnode:</p> <pre><code>npm run deploy:local\n</code></pre> <p>Or run the deployment script directly:</p> <pre><code>npx hardhat run scripts/deploy/deploy-cache-manager-automation.ts --network localArb\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83d\udcca Deployment Summary:\n{\n  \"network\": \"localArb\",\n  \"cacheManagerAutomation\": \"0xA6E41fFD769491a42A6e5Ce453259b93983a22EF\",\n  \"deployer\": \"0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\",\n  \"timestamp\": \"2025-07-17T23:04:10.642Z\"\n}\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#arbitrum-sepolia-deployment","title":"Arbitrum Sepolia Deployment","text":"<p>Deploy to Arbitrum Sepolia testnet:</p> <pre><code>npm run deploy:sepolia\n</code></pre> <p>Or run the deployment script directly:</p> <pre><code>npx hardhat run scripts/deploy/deploy-cache-manager-automation.ts --network arbitrumSepolia\n</code></pre> <p>Expected Output:</p> <pre><code>\ud83d\udcca Deployment Summary:\n{\n  \"network\": \"arbitrumSepolia\",\n  \"cacheManagerAutomation\": \"0x1B38ABF292a39F659916A9e7074aB1C3407196A9\",\n  \"deployer\": \"0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\",\n  \"timestamp\": \"2025-07-17T23:04:54.430Z\"\n}\n</code></pre> <p>Deployment Success</p> <p>Congratulations! Your Cache Manager Automation contracts are now deployed and ready to use.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#custom-network-configuration","title":"\ud83d\udd27 Custom Network Configuration","text":"<p>To add support for additional Arbitrum-compatible networks, modify these files:</p>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#deployment-configuration","title":"Deployment Configuration","text":"<p>Edit <code>config/deployment-config.ts</code> to add new network configurations:</p> <pre><code>export const deploymentConfigs = {\n  // Add your custom network here\n  customNetwork: {\n    cacheManagerAddress: CACHE_MANAGER_ADDRESSES.customNetwork,\n    arbWasmCacheAddress: ARB_WASM_CACHE_ADDRESSES.customNetwork,\n    maxContractsPerUser: DEFAULT_CONFIG.maxContractsPerUser,\n    maxUserFunds: DEFAULT_CONFIG.maxUserFunds,\n    upgradeDelay: DEFAULT_CONFIG.upgradeDelay,\n    verify: true,\n    // ... other configuration\n  },\n};\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#constants-configuration","title":"Constants Configuration","text":"<p>Update <code>config/constants.ts</code> with network-specific constants:</p> <pre><code>// Contract addresses by network\nexport const CACHE_MANAGER_ADDRESSES = {\n  arbitrumOne: '0x51dedbd2f190e0696afbee5e60bfde96d86464ec',\n  arbitrumSepolia: '0x0c9043d042ab52cfa8d0207459260040cca54253',\n  localArb: '0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8',\n  customNetwork: '0x0000000000000000000000000000000000000000',\n};\n\nexport const ARB_WASM_CACHE_ADDRESSES = {\n  arbitrumOne: '0x0000000000000000000000000000000000000072',\n  arbitrumSepolia: '0x0000000000000000000000000000000000000072',\n  localArb: '0x0000000000000000000000000000000000000072',\n  customNetwork: '0x0000000000000000000000000000000000000072',\n};\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#customnetwork-deployment","title":"CustomNetwork Deployment","text":"<p>For deploying the CMA contracts into your custom network you can run</p> <pre><code>npx hardhat run scripts/deploy/deploy-cache-manager-automation.ts --network customNetwork\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#post-deployment-steps","title":"\ud83d\udccb Post-Deployment Steps","text":"<p>After successful deployment:</p> <ol> <li>\ud83d\udcdd Save Contract Addresses: Note the deployed contract addresses for configuration</li> <li>\ud83d\udd17 Update Configuration: Use the addresses in your backend and frontend configuration</li> <li>\u2705 Verify Deployment: Check contract verification on block explorers (if applicable)</li> </ol>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#return-to-root-directory","title":"Return to Root Directory","text":"<pre><code>cd ../../\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/deploy-cma-contracts/#next-steps","title":"\ud83d\udd27 Next Steps","text":"<p>With your contracts deployed, proceed to:</p> <ol> <li>Configure ThirdWeb Engine - Set up automation services</li> <li>SCM UI Backend - Configure the backend API</li> </ol>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/","title":"\ud83c\udfd7\ufe0f Stylus Cache Manager UI: Local Deployment Overview","text":"<p>Deploy and run the complete Stylus Cache Manager UI system locally for development, testing, or self-hosted production use. This guide covers everything from repository setup to full system deployment.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#what-youll-build","title":"\ud83c\udfaf What You'll Build","text":"<p>This deployment guide will help you set up the complete Stylus Cache Manager ecosystem locally:</p> <ul> <li>\ud83d\udce6 Smart Contracts: Cache Manager Automation contracts for automated bidding</li> <li>\ud83e\udd16 ThirdWeb Engine: Self-hosted automation service for executing transactions</li> <li>\ud83d\udd27 Backend API: RESTful service for managing contracts, bids, and automations</li> <li>\ud83d\udda5\ufe0f Frontend UI: Modern web interface for cache management</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<p>Before starting, ensure you have:</p> <ul> <li>Node.js (v22 or higher) and npm</li> <li>Docker and Docker Compose for containerized services</li> <li>Git for repository management</li> <li>Arbitrum Testnode (optional, for local blockchain testing)</li> <li>ThirdWeb Account for Engine service configuration</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#deployment-steps","title":"\ud83d\udccb Deployment Steps","text":""},{"location":"local-deployment/stylus-cache-manager-ui/overview/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>Set up the project with all submodules and dependencies.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#2-deploy-cma-contracts","title":"2. Deploy CMA Contracts","text":"<p>Deploy the Cache Manager Automation smart contracts to your chosen network.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#3-configure-thirdweb-engine","title":"3. Configure ThirdWeb Engine","text":"<p>Set up the self-hosted automation service for executing automated bids.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#4-scm-ui-backend","title":"4. SCM UI Backend","text":"<p>Configure and deploy the backend API service.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/overview/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Ready to get started? Begin with Cloning the Repository to set up your development environment.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/","title":"\ud83d\udd27 SCM UI Backend Deployment","text":"<p>Deploy the Stylus Cache Manager backend API - the core service that handles contract management, automated bidding, and real-time blockchain event processing.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#what-is-the-scm-ui-backend","title":"\ud83c\udfaf What is the SCM UI Backend?","text":"<p>The SCM UI Backend is a comprehensive API service that provides:</p> <ul> <li>\ud83d\udcca Real-time Data Processing: Syncs blockchain events and maintains cache state</li> <li>\ud83e\udd16 Automation Management: Handles automated bidding logic and ThirdWeb Engine integration</li> <li>\ud83d\udd10 Authentication: Manages user sessions and wallet authentication</li> <li>\ud83d\udcf1 RESTful APIs: Provides endpoints for frontend communication</li> <li>\ud83d\udd14 Notification System: Sends alerts via Telegram and other channels</li> <li>\ud83d\udcbe Data Persistence: Stores contracts, bids, and user data in PostgreSQL</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<p>Before deploying the backend, ensure you have:</p> <ul> <li>\u2705 Deployed CMA Contracts from the previous step</li> <li>\u2705 Configured ThirdWeb Engine with access token and backend wallet</li> <li>\u2705 Docker &amp; Docker Compose running</li> <li>\u2705 PostgreSQL &amp; Redis (handled by Docker Compose)</li> <li>\ud83d\udd11 ThirdWeb Access Token from Engine configuration</li> <li>\ud83d\udcb0 Backend Wallet Address imported in ThirdWeb Engine</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#configuration-setup","title":"\u2699\ufe0f Configuration Setup","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#1-environment-files","title":"1. Environment Files","text":"<p>Copy the example environment files:</p> <pre><code>cp src/docker/.env.backend.example src/docker/.env.backend\ncp src/docker/.env.scm-db.example src/docker/.env.scm-db\n</code></pre> <p>Database Configuration</p> <p>For local testing, the SCM database environment can remain as in the example. The Docker Compose setup handles all database initialization.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#blockchain-configuration","title":"\ud83c\udf10 Blockchain Configuration","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#network-settings","title":"Network Settings","text":"<p>Configure blockchain connections via environment variables in <code>src/docker/.env.backend</code>:</p> <pre><code># Arbitrum One (Production) - Disabled for testing\nARB_ONE_RPC=\nARB_ONE_RPC_WSS=\nARB_ONE_FAST_SYNC_RPC=https://arbitrum.rpc.hypersync.xyz\nARB_ONE_CMA_ADDRESS=\nARB_ONE_ENABLED=false\n\n# Arbitrum Sepolia (Testing) - Enabled\nARB_SEPOLIA_RPC=https://sepolia-rollup.arbitrum.io/rpc\nARB_SEPOLIA_RPC_WSS=wss://sepolia-rollup.arbitrum.io/ws\nARB_SEPOLIA_FAST_SYNC_RPC=https://arbitrum-sepolia.rpc.hypersync.xyz\nARB_SEPOLIA_CMA_ADDRESS=0x1B38ABF292a39F659916A9e7074aB1C3407196A9\nARB_SEPOLIA_ENABLED=true\n\n# Arbitrum Local (Development) - Enabled\nARB_LOCAL_RPC=http://host.docker.internal:8547\nARB_LOCAL_RPC_WSS=ws://host.docker.internal:8548\nARB_LOCAL_FAST_SYNC_RPC=http://host.docker.internal:8547\nARB_LOCAL_CMA_ADDRESS=0xA6E41fFD769491a42A6e5Ce453259b93983a22EF\nARB_LOCAL_ENABLED=true\n</code></pre> <p>RPC Provider Selection</p> <p>Use an RPC provider that doesn't trigger rate limits easily. For initial sync, we use Hypersync for efficient block event reading.</p> <p>CMA Address Configuration</p> <p>Replace the CMA addresses with the actual deployed contract addresses from your deployment step.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#thirdweb-engine-integration","title":"\ud83d\udd11 ThirdWeb Engine Integration","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#engine-configuration","title":"Engine Configuration","text":"<p>Configure ThirdWeb Engine integration using your access token and backend wallet:</p> <pre><code># Backend wallet address (imported in ThirdWeb Engine)\nENGINE_BACKEND_WALLET_ADDRESS=0xYourBackendWalletAddress\n\n# Access token from ThirdWeb Engine configuration\nENGINE_AUTH_TOKEN=your_thirdweb_access_token_here\n</code></pre> <p>Token Security</p> <p>Keep your access token secure. This token allows the backend to communicate with your ThirdWeb Engine instance.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#optional-telegram-notifications","title":"\ud83d\udd14 Optional: Telegram Notifications","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#bot-configuration","title":"Bot Configuration","text":"<p>For Telegram notifications, create a bot through @BotFather and configure:</p> <pre><code># Telegram bot token (optional)\nTELEGRAM_BOT_TOKEN=your_telegram_bot_token_here\n</code></pre> <p>Notification Setup</p> <p>If you don't need notifications yet, leave this empty. You can configure it later.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#nginx-configuration","title":"\ud83c\udf10 Nginx Configuration","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#switch-to-local-branch","title":"Switch to Local Branch","text":"<p>For local testing without CORS restrictions, switch to the local branch:</p> <pre><code>cd submodules/stylus-cm-nginx\ngit checkout local\ncd ../../\n</code></pre> <p>CORS Configuration</p> <p>The local branch removes CORS checks for easier local development. For production, use the main branch with proper CORS settings.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#deploy-backend-services","title":"\ud83d\ude80 Deploy Backend Services","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#automated-deployment","title":"Automated Deployment","text":"<p>Use the npm script to start all backend services:</p> <pre><code>npm run backend:start\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#manual-deployment","title":"Manual Deployment","text":"<p>Or deploy manually with Docker Compose:</p> <pre><code>docker compose -f src/docker/docker-compose.yaml up -d scm-db scm-redis scm-backend scm-nginx\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#service-management","title":"Service Management","text":"<p>Additional commands for managing backend services:</p> <pre><code># Pause services\nnpm run backend:pause\n\n# Stop and remove services\nnpm run backend:delete\n\n# View logs\ndocker compose -f src/docker/docker-compose.yaml logs -f scm-backend\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#verification-monitoring","title":"\ud83d\udcca Verification &amp; Monitoring","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#initial-sync-process","title":"Initial Sync Process","text":"<p>After starting the backend, you should see extensive synchronization logs:</p> <pre><code># Monitor backend logs\ndocker compose -f src/docker/docker-compose.yaml logs -f scm-backend\n</code></pre> <p>Expected Log Output:</p> <pre><code>[Nest] 30  - 07/18/2025, 8:03:47 PM   DEBUG [DataProcessing - InsertBid] No contract found for 0x66a8332553D190dd6b5a0d7083a13a5C596Cb1E7, creating new entry\n[Nest] 30  - 07/18/2025, 8:03:47 PM     LOG [DataProcessing - InsertBid] Successfully processed InsertBid event for bytecode 0xde65f497af6c8526dbe61b9f4798728c16d0765d53ca9ecf3a5218c529148144\n[Nest] 30  - 07/18/2025, 8:03:47 PM   DEBUG [DataProcessing - EventProcessor] Successfully processed event InsertBid\n[Nest] 30  - 07/18/2025, 8:03:47 PM   DEBUG [DataProcessing - EventProcessor] Processing event InsertBid for blockchain Arbitrum Sepolia\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#database-verification","title":"Database Verification","text":"<p>Check that blockchain data is being populated:</p> <p>Sync Success</p> <p>You should see all configured blockchains and extensive event data loaded into the database.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#deployment-complete","title":"\u2705 Deployment Complete","text":"<p>Congratulations! Your SCM UI Backend is now:</p> <ul> <li>\ud83d\udcca Syncing blockchain events in real-time</li> <li>\ud83e\udd16 Connected to ThirdWeb Engine for automation</li> <li>\ud83d\udd10 Ready for frontend integration</li> <li>\ud83d\udcbe Storing data in PostgreSQL</li> <li>\ud83d\udd14 Configured for notifications (if enabled)</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-backend/#next-steps","title":"\ud83d\udd27 Next Steps","text":"<p>With the backend deployed, proceed to SCM UI Frontend - Deploy the frontend web application</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/","title":"\ud83d\udda5\ufe0f SCM UI Frontend Deployment","text":"<p>Deploy the Stylus Cache Manager frontend - the modern web interface that provides an intuitive way to manage your Stylus contracts, place bids, and configure automated bidding.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#what-is-the-scm-ui-frontend","title":"\ud83c\udfaf What is the SCM UI Frontend?","text":"<p>The SCM UI Frontend is a Next.js web application that provides:</p> <ul> <li>\ud83d\udd10 Wallet Authentication: Secure login with Ethereum wallets</li> <li>\ud83d\udccb Contract Management: View and organize your Stylus contracts</li> <li>\ud83d\udcb0 Manual Bidding: Place bids directly from the web interface</li> <li>\ud83e\udd16 Automation Setup: Configure automated bidding strategies</li> <li>\ud83d\udcca Real-time Analytics: Monitor cache status and bid performance</li> <li>\ud83d\udd14 Alert Management: Set up and manage notification preferences</li> <li>\ud83c\udf10 Multi-chain Support: Work with multiple Arbitrum networks</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<p>Before deploying the frontend, ensure you have:</p> <ul> <li>\u2705 SCM UI Backend running and accessible</li> <li>\u2705 Node.js (v22 or higher) and npm</li> <li>\u2705 Modern web browser with wallet extension (MetaMask, etc.)</li> <li>\u2705 Funded wallet for testing transactions</li> <li>\ud83c\udf10 Backend API accessible at <code>http://localhost:3000</code></li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#configuration-setup","title":"\u2699\ufe0f Configuration Setup","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#1-navigate-to-frontend-directory","title":"1. Navigate to Frontend Directory","text":"<pre><code>cd submodules/stylus-cm-frontend\n</code></pre> <p>Directory Structure</p> <p>The frontend is located in the <code>submodules/stylus-cm-frontend</code> directory as part of the monorepo structure.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#environment-configuration","title":"\ud83d\udd27 Environment Configuration","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#create-environment-file","title":"Create Environment File","text":"<p>Create a <code>.env</code> file in the frontend directory:</p> <pre><code># Create environment file\ntouch .env\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#configure-environment-variables","title":"Configure Environment Variables","text":"<p>Add the following configuration to <code>.env</code>:</p> <pre><code># API Configuration\nNEXT_PUBLIC_API_URL=http://localhost:3000\n\n# Default Chain Configuration\nNEXT_PUBLIC_DEFAULT_CHAIN_ID=421614\n</code></pre> <p>Chain Configuration</p> <p>We're using Arbitrum Sepolia (chain ID: 421614) as the default network for testing. You can change this to any supported Arbitrum network.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#supported-networks","title":"Supported Networks","text":"Network Chain ID Use Case \ud83c\udfe0 Arbitrum Local 412346 Local development and testing \ud83d\udd35 Arbitrum Sepolia 421614 Staging and integration testing \ud83d\udfe2 Arbitrum One 42161 Production deployment"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#development-deployment","title":"\ud83d\ude80 Development Deployment","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#install-dependencies","title":"Install Dependencies","text":"<p>Ensure all dependencies are installed:</p> <pre><code>npm install\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#start-development-server","title":"Start Development Server","text":"<p>Launch the frontend in development mode:</p> <pre><code>npm run dev\n</code></pre> <p>Frontend Running</p> <p>Your frontend will be available at: http://localhost:5000</p>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#verification-testing","title":"\ud83d\udd0d Verification &amp; Testing","text":""},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#1-access-the-application","title":"1. Access the Application","text":"<p>Open your browser and navigate to:</p> <pre><code>http://localhost:5000\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#2-connect-your-wallet","title":"2. Connect Your Wallet","text":"<ol> <li>Click \"Connect Wallet\" in the top navigation</li> <li>Select your wallet provider (MetaMask, WalletConnect, etc.)</li> <li>Approve the connection in your wallet</li> <li>Verify connection status shows as connected</li> </ol>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#3-test-core-features","title":"3. Test Core Features","text":"<p>Verify the following functionality:</p> <ul> <li>\u2705 Wallet Connection: Successfully connect your wallet</li> <li>\u2705 Network Detection: Correct network is detected</li> <li>\u2705 API Communication: Backend API is responding</li> <li>\u2705 Contract Loading: Your contracts are displayed</li> <li>\u2705 Navigation: All menu items are accessible</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/scm-ui-frontend/#deployment-and-system-complete","title":"\u2705 Deployment and System Complete","text":"<p>Congratulations! Your SCM UI Frontend is now \ud83d\udda5\ufe0f Running on port 5000 at http://localhost:5000</p> <p>You've successfully deployed the complete Stylus Cache Manager system:</p> <ul> <li>\ud83d\udce6 Smart Contracts - CMA contracts deployed</li> <li>\ud83e\udd16 ThirdWeb Engine - Automation service configured</li> <li>\ud83d\udd27 Backend API - Data processing and management</li> <li>\ud83d\udda5\ufe0f Frontend UI - User interface and interactions</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/","title":"\ud83e\udd16 ThirdWeb Engine Configuration","text":"<p>Set up ThirdWeb Engine for automated transaction execution - the self-hosted automation service that handles automated bidding for your Stylus contracts.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#what-is-thirdweb-engine","title":"\ud83c\udfaf What is ThirdWeb Engine?","text":"<p>ThirdWeb Engine is a self-hosted automation service that:</p> <ul> <li>\ud83e\udd16 Executes Transactions: Places backend triggered automated bids based on configured rules</li> <li>\ud83d\udd12 Secure Execution: Handles private keys securely in isolated containers</li> <li>\ud83d\udcca Monitoring: Provides transaction history and status tracking</li> <li>\ud83c\udf10 Multi-Network: Supports multiple blockchain networks simultaneously</li> </ul> <p>Why Self-Hosted?</p> <p>Self-hosting Engine v2 gives you full control over your automation infrastructure while maintaining security and reliability.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#prerequisites","title":"\ud83d\udd27 Prerequisites","text":"<p>Before configuring ThirdWeb Engine, ensure you have:</p> <ul> <li>Docker &amp; Docker Compose installed and running</li> <li>ThirdWeb Account (free registration at thirdweb.com)</li> <li>Deployed CMA Contracts from the previous step</li> <li>Access to a deployment wallet for configuration</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#setup-overview","title":"\ud83d\udccb Setup Overview","text":"<p>The configuration process involves:</p> <ol> <li>\ud83c\udfd7\ufe0f Create ThirdWeb Project - Set up your workspace</li> <li>\ud83d\udd11 Configure Environment - Set up local environment variables</li> <li>\ud83d\udc33 Deploy Engine Services - Start the self-hosted automation</li> <li>\ud83d\udd17 Link to ThirdWeb Dashboard - Connect local instance to web interface</li> <li>\ud83d\udcb0 Configure Wallets - Set up backend wallet for transactions</li> <li>\ud83c\udf10 Add Custom Networks - Configure your Arbitrum networks</li> </ol>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-1-create-thirdweb-project","title":"\ud83c\udfd7\ufe0f Step 1: Create ThirdWeb Project","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#11-login-to-thirdweb","title":"1.1 Login to ThirdWeb","text":"<p>Visit thirdweb.com and log in using your wallet</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#12-create-new-project","title":"1.2 Create New Project","text":"<p>Create a new project for your automation setup:</p> <p>Domain Configuration</p> <p>For testing, you can allow all domains. For production, specify your backend domain and thirdweb domain for enhanced security.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#13-save-project-keys","title":"1.3 Save Project Keys","text":"<p>Copy and save your project keys securely - you'll need them for configuration:</p> <p>Key Security</p> <p>The wallet you use to log in will become the project admin. Keep your keys secure and never share them publicly.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-2-configure-environment","title":"\ud83d\udd11 Step 2: Configure Environment","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#21-copy-environment-files","title":"2.1 Copy Environment Files","text":"<p>Copy the example environment files:</p> <pre><code>cp src/docker/.env.engine.example src/docker/.env.engine\ncp src/docker/.env.engine-db.example src/docker/.env.engine-db\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#22-configure-engine-environment","title":"2.2 Configure Engine Environment","text":"<p>Edit <code>src/docker/.env.engine</code> with your ThirdWeb configuration:</p> <pre><code># Required: Complex password for database encryption\nENCRYPTION_PASSWORD=your_complex_encryption_password_here\n\n# Required: Your ThirdWeb API secret key\nTHIRDWEB_API_SECRET_KEY=your_thirdweb_api_secret_key\n\n# Required: Admin wallet address (use your ThirdWeb login wallet)\nADMIN_WALLET_ADDRESS=0xYourThirdWebLoginWalletAddress\n\n# Required: Backend wallet address (can be same as admin for testing)\nBACKEND_WALLET_ADDRESS=0xYourThirdWebLoginWalletAddress\n\n# Optional: Keep defaults for local deployment\nPOSTGRES_CONNECTION_URL=postgresql://scm-engine-db-user:scm-engine-db-pwd@scm-engine-db:5432/scm_engine_db?sslmode=disable\nREDIS_URL=redis://scm-engine-redis:6381?family=0\nPORT=3005\nHOST=::\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#23-configure-database-environment","title":"2.3 Configure Database Environment","text":"<p>Edit <code>src/docker/.env.engine-db</code> (keep defaults for local deployment):</p> <pre><code>POSTGRES_CONNECTION_URL=postgresql://scm-engine-db-user:scm-engine-db-pwd@scm-engine-db:5432/scm_engine_db?sslmode=disable\nREDIS_URL=redis://scm-engine-redis:6381?family=0\nPORT=3005\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-3-deploy-engine-services","title":"\ud83d\udc33 Step 3: Deploy Engine Services","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#31-start-engine-services","title":"3.1 Start Engine Services","text":"<p>Use the automated script to start all Engine services:</p> <pre><code>npm run engine:start\n</code></pre> <p>Or manually start with Docker Compose:</p> <pre><code>docker compose -f src/docker/docker-compose.yaml up -d scm-engine-db scm-engine-redis scm-engine\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#32-verify-services","title":"3.2 Verify Services","text":"<p>Check that all services are running:</p> <pre><code>docker compose -f src/docker/docker-compose.yaml ps\n</code></pre> <p>You should see:</p> <ul> <li><code>scm-engine-db</code> - PostgreSQL database</li> <li><code>scm-engine-redis</code> - Redis cache</li> <li><code>scm-engine</code> - ThirdWeb Engine service</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#33-service-management","title":"3.3 Service Management","text":"<p>Additional commands for managing Engine services:</p> <pre><code># Pause services\nnpm run engine:pause\n\n# Stop and remove services\nnpm run engine:delete\n\n# View logs\ndocker compose -f src/docker/docker-compose.yaml logs -f scm-engine\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-4-link-to-thirdweb-dashboard","title":"\ud83d\udd17 Step 4: Link to ThirdWeb Dashboard","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#41-allow-http-requests","title":"4.1 Allow HTTP Requests","text":"<p>HTTP Access Required</p> <p>To allow the ThirdWeb frontend to communicate with your local Engine instance, visit this URL in your browser:</p> <pre><code>http://localhost:3005/json\n</code></pre> <p>Accept the HTTP security warning and allow insecure navigation.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#42-access-project-transactions","title":"4.2 Access Project Transactions","text":"<p>Navigate to your project's transactions page:</p> <pre><code>https://thirdweb.com/team/&lt;USERNAME&gt;/&lt;PROJECT_NAME&gt;/transactions\n</code></pre>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#43-view-dedicated-engine","title":"4.3 View Dedicated Engine","text":"<p>Click on \"View Dedicated Engine\" to access Engine management:</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#44-import-local-engine","title":"4.4 Import Local Engine","text":"<p>Click \"Import Engine\" to connect your local instance:</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#45-configure-engine-settings","title":"4.5 Configure Engine Settings","text":"<p>Configure your local Engine instance:</p> <p>Local Access Only</p> <p>Only you can manage this instance since it's running on localhost. For team access, deploy to cloud or create a tunnel.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#46-verify-instance","title":"4.6 Verify Instance","text":"<p>After importing, you should see your Engine instance in your list.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-5-configure-backend-wallet","title":"\ud83d\udcb0 Step 5: Configure Backend Wallet","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#51-import-backend-wallet","title":"5.1 Import Backend Wallet","text":"<p>For testing, you can import the admin wallet as the backend wallet:</p> <p>Production Security</p> <p>For production, use a separate wallet for backend operations. Backend wallets only need balance - if compromised, you can replace them easily.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#52-verify-wallet-import","title":"5.2 Verify Wallet Import","text":"<p>Confirm the wallet is successfully imported:</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-6-create-access-token","title":"\ud83d\udd11 Step 6: Create Access Token","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#61-generate-access-token","title":"6.1 Generate Access Token","text":"<p>Go to the Access Tokens section and create a new token:</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#62-save-token","title":"6.2 Save Token","text":"<p>Copy and save your access token securely:</p> <p>Token Security</p> <p>Keep this token secure - it's required for backend communication with Engine.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#step-7-add-custom-networks","title":"\ud83c\udf10 Step 7: Add Custom Networks","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#71-add-local-testnode","title":"7.1 Add Local Testnode","text":"<p>Use your access token to add your local Arbitrum testnode:</p> <pre><code>ACCESS_TOKEN=&lt;PASTE_YOUR_ACCESS_TOKEN&gt;\n\ncurl --location 'http://localhost:3005/configuration/chains' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer '$ACCESS_TOKEN \\\n--data '{\n  \"chainOverrides\": [\n    {\n      \"name\": \"Arbitrum Local\",\n      \"chain\": \"ETH\",\n      \"rpc\": [\n        \"http://host.docker.internal:8547\"\n      ],\n      \"nativeCurrency\": {\n        \"name\": \"Ether\",\n        \"symbol\": \"ETH\",\n        \"decimals\": 18\n      },\n      \"chainId\": 412346,\n      \"slug\": \"arbitrum-local\"\n    }\n  ]\n}'\n</code></pre> <p>Docker Networking</p> <p>We use <code>host.docker.internal:8547</code> instead of <code>localhost:8547</code> because Engine runs in Docker containers and needs to access the host machine's localhost.</p>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#72-add-other-networks","title":"7.2 Add Other Networks","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#you-can-add-any-custom-network-to-engine-by-using-the-same-request-we-used-for-adding-arbitrum-local-testnode","title":"You can add any custom network to Engine by using the same request we used for adding Arbitrum Local Testnode","text":""},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#configuration-complete","title":"\u2705 Configuration Complete","text":"<p>Congratulations! Your ThirdWeb Engine is now configured and ready to:</p> <ul> <li>\ud83e\udd16 Execute automated transactions for cache bidding</li> <li>\ud83d\udcca Monitor transaction status through the ThirdWeb dashboard</li> <li>\ud83d\udd12 Securely manage private keys in isolated containers</li> <li>\ud83c\udf10 Support multiple networks for different environments</li> </ul>"},{"location":"local-deployment/stylus-cache-manager-ui/third-web-engine/#next-steps","title":"\ud83d\udd27 Next Steps","text":"<p>With Engine configured, proceed to SCM UI Backend - Configure the backend API service</p>"},{"location":"old/","title":"Index","text":""},{"location":"old/#welcome-to-the-stylus-cache-manager","title":"Welcome to the Stylus Cache Manager \ud83d\ude80","text":"<p>This documentation serves as the go-to resource for developers, testers, and users interacting with the Stylus Cache Manager. Whether you\u2019re integrating smart contracts, setting up automation, or deploying the system, you\u2019ll find everything you need here.</p>"},{"location":"old/#what-is-the-cache-manager","title":"\ud83d\udd39 What is the Cache Manager?","text":"<p>The Stylus Cache Manager optimizes contract execution by allowing contracts to reserve and maintain storage in the cache layer. This system enables faster access and reduces gas costs for frequently used contracts. However, contracts must actively bid for cache space\u2014this is where our automation and bidding logic come into play.</p> <p>Our solution provides: \u2705 Smart contract interactions for managing bids and cache slots. \u2705 Automated bidding using Chainlink Automation. \u2705 A user-friendly dApp to simplify contract management.</p>"},{"location":"old/#getting-started","title":"\ud83d\udccc Getting Started","text":"<p>If you\u2019re new to the system, follow these guides:</p> <p>\ud83d\udcd6 Cache Manager Info \u2013 Understand the core mechanics of CacheManager. \u2699\ufe0f Nitro Test Node \u2013 Set up and interact with a local Nitro test node. \ud83d\udd17 CM Interactions \u2013 Learn how to manually interact with CacheManager. \ud83d\udee0\ufe0f Guided Testing \u2013 Step-by-step testing workflow.</p>"},{"location":"old/#project-components","title":"\ud83c\udfd7\ufe0f Project Components","text":""},{"location":"old/#stylus-cm-contracts","title":"\ud83d\udd37 Stylus CM Contracts","text":"<ul> <li>Overview \u2013 Dive into the contract architecture.</li> <li>Local Testing \u2013 Set up and test contracts locally with Foundry &amp; Hardhat.</li> </ul>"},{"location":"old/#system-deployment-wip","title":"\ud83d\udd37 System Deployment (WIP)","text":"<ul> <li>Local Deployment \u2013 Deploy and test the system in a local environment.</li> <li>Docker Deployment \u2013 Spin up the system using Docker Compose.</li> <li>Kubernetes Deployment \u2013 Run the system on a K8s cluster for scalability.</li> </ul>"},{"location":"old/getting-started/01-cmUsefulInfo/","title":"\ud83d\udd17 Cache Manager Reference","text":""},{"location":"old/getting-started/01-cmUsefulInfo/#cache-manager-contract","title":"\ud83d\udcdc Cache Manager Contract","text":"<p>The Cache Manager is a core smart contract that manages the cache bidding system on Arbitrum. It ensures contracts can reserve cache slots, optimizing performance and execution costs.</p> <p>\ud83d\udccc View Source Code (ARB GitHub)</p>"},{"location":"old/getting-started/01-cmUsefulInfo/#arbitrum-rpc-endpoints","title":"\ud83c\udf0d Arbitrum RPC Endpoints","text":"<p>Use the following RPC endpoints to interact with the Cache Manager on different Arbitrum networks:</p> Network RPC Endpoint \ud83d\udfe2 Arbitrum One <code>https://arb1.arbitrum.io/rpc</code> \ud83d\udfe0 Arbitrum Nova <code>https://nova.arbitrum.io/rpc</code> \ud83d\udd35 Arbitrum Sepolia <code>https://sepolia-rollup.arbitrum.io/rpc</code> \ud83c\udfe0 Arbitrum Local <code>http://localhost:8547</code> (default for local testing)"},{"location":"old/getting-started/01-cmUsefulInfo/#retrieve-cache-manager-address","title":"\ud83d\udccd Retrieve Cache Manager Address","text":"<p>To obtain the Cache Manager contract address on any network, run the following command:</p> <pre><code>cargo stylus cache status --endpoint=&lt;RPC_ENDPOINT&gt;\n</code></pre>"},{"location":"old/getting-started/01-cmUsefulInfo/#cache-manager-addresses-per-network","title":"\ud83d\udd39 Cache Manager Addresses per Network","text":"Network Cache Manager Address \ud83d\udfe2 Arbitrum One <code>0x51dedbd2f190e0696afbee5e60bfde96d86464ec</code> \ud83d\udfe0 Arbitrum Nova <code>0x20586f83bf11a7cee0a550c53b9dc9a5887de1b7</code> \ud83d\udd35 Arbitrum Sepolia <code>0x0c9043d042ab52cfa8d0207459260040cca54253</code> \ud83c\udfe0 Arbitrum Local <code>0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8</code>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/","title":"\ud83d\udee0\ufe0f Running a Local Nitro Testnode","text":""},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#clone-the-repository","title":"\ud83d\udd04 Clone the Repository","text":"<p>To set up a local Nitro testnode, first clone the arb-research repository:</p> <pre><code>git clone https://github.com/OffchainLabs/nitro-testnode.git\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#start-the-nitro-testnode","title":"\ud83d\ude80 Start the Nitro Testnode","text":"<p>Once the repository is set up, navigate to the <code>nitro-testnode</code> submodule and initialize the testnode:</p> <pre><code>cd submodules/nitro-testnode\n./test-node.bash --init\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#useful-addresses-on-the-testnode","title":"\ud83d\udccc Useful Addresses on the Testnode","text":""},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#prefunded-account","title":"\ud83d\udd39 Prefunded Account","text":"<pre><code>ADDRESS: 0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\nPK: 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#sequencer-account","title":"\ud83d\udd39 Sequencer Account","text":"<pre><code>ADDRESS: 0xe2148eE53c0755215Df69b2616E552154EdC584f\nPK: 0xcb5790da63720727af975f42c79f69918580209889225fa7128c92402a6d3a65\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#validator-account","title":"\ud83d\udd39 Validator Account","text":"<pre><code>ADDRESS: 0x6A568afe0f82d34759347bb36F14A6bB171d2CBe\nPK: 0x182fecf15bdf909556a0f617a63e05ab22f1493d25a9f1e27c228266c772a890\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#l2-owner-account","title":"\ud83d\udd39 L2 Owner Account","text":"<pre><code>ADDRESS: 0x5E1497dD1f08C87b2d8FE23e9AAB6c1De833D927\nPK: 0xdc04c5399f82306ec4b4d654a342f40e2e0620fe39950d967e1e574b32d4dd36\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#l3-sequencer-if-enabled","title":"\ud83d\udd39 L3 Sequencer (if enabled)","text":"<pre><code>ADDRESS: 0x3E6134aAD4C4d422FF2A4391Dc315c4DDf98D1a5\nPK: 0x90f899754eb42949567d3576224bf533a20857bf0a60318507b75fcb3edc6f5f\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#l3-owner-if-enabled","title":"\ud83d\udd39 L3 Owner (if enabled)","text":"<pre><code>ADDRESS: 0x863c904166E801527125D8672442D736194A3362\nPK: 0xecdf21cb41c65afb51f91df408b7656e2c8739a5877f2814add0afd780cc210e\n</code></pre>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#core-contracts-on-testnode","title":"\ud83d\udd17 Core Contracts on Testnode","text":"Contract Address RollupProxy <code>0x7d98BA231d29D5C202981542C0291718A7358c63</code> Inbox (proxy) <code>0x9f8c1c641336A371031499e3c362e40d58d0f254</code> Outbox (proxy) <code>0x50143333b44Ea46255BEb67255C9Afd35551072F</code> RollupEventInbox (proxy) <code>0x0e73Faf857E1ca53E700856fCf19F31F920a1e3c</code> ChallengeManager (proxy) <code>0x784FC11476F3d06801A76b944795E6367391b12e</code> AdminProxy <code>0x2A1f38c9097e7883570e0b02BFBE6869Cc25d8a3</code> SequencerInbox (proxy) <code>0x18d19C5d3E685f5be5b9C86E097f0E439285D216</code> Bridge (proxy) <code>0x5eCF728ffC5C5E802091875f96281B5aeECf6C49</code> ValidatorUtils <code>0xa80482dDdB7F8B9DcC24A1cd13488E3379a14568</code> ValidatorWalletCreator <code>0x92f58045FFB1C00a7b9486B9D2a55d316380CB45</code>"},{"location":"old/getting-started/02-nitroTestNodeRunAndAddresses/#cache-manager-contracts","title":"\ud83d\uddc4\ufe0f Cache Manager Contracts","text":"Contract Address CacheManager created at <code>0x217788c286797D56Cd59aF5e493f3699C39cbbe8</code> ProxyAdmin created at <code>0x7DD3F2a3fAeF3B9F2364c335163244D3388Feb83</code> TransparentUpgradeableProxy created at <code>0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8</code><code>0x217788c286797D56Cd59aF5e493f3699C39cbbe8</code><code>0x7DD3F2a3fAeF3B9F2364c335163244D3388Feb83</code> CacheManager deployed at <code>0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8</code>"},{"location":"old/getting-started/03-cacheManagerInteractions/","title":"\ud83d\udcdc RPC Cheatsheet","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#useful-environment-variables","title":"\ud83d\udd39 Useful Environment Variables","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#rpc-urls","title":"RPC URLs","text":"<pre><code>export ARBONE_RPC=\"https://arb1.arbitrum.io/rpc\"\nexport ARBNOV_RPC=\"https://nova.arbitrum.io/rpc\"\nexport ARBSEP_RPC=\"https://sepolia-rollup.arbitrum.io/rpc\"\nexport ARBLOC_RPC=\"http://localhost:8547\"\nexport L1LOC_RPC=\"http://localhost:8545\"\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#cache-manager-addresses","title":"Cache Manager Addresses","text":"<pre><code>export ARBONE_CM=0x51dedbd2f190e0696afbee5e60bfde96d86464ec\nexport ARBNOV_CM=0x20586f83bf11a7cee0a550c53b9dc9a5887de1b7\nexport ARBSEP_CM=0x0c9043d042ab52cfa8d0207459260040cca54253\nexport ARBLOC_CM=0x0f1f89aaf1c6fdb7ff9d361e4388f5f3997f12a8\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#nitro-testnode-accounts","title":"Nitro Testnode Accounts","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#pre-funded-account","title":"Pre-funded Account","text":"<pre><code>export ARBPRE_ADD=0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E\nexport ARBPRE_PK=0xdc04c5399f82306ec4b4d654a342f40e2e0620fe39950d967e1e574b32d4dd36\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#l2-owner-account","title":"L2 Owner Account","text":"<pre><code>export ARBLOC_OWNER_PK=0xdc04c5399f82306ec4b4d654a342f40e2e0620fe39950d967e1e574b32d4dd36\n</code></pre> <p>Define environment variables for easier interactions</p> <pre><code>export RPC=$ARBLOC_RPC\nexport ACC_PK=$ARBPRE_PK\nexport ACC_ADD=$ARBPRE_ADD\nexport CM_ADD=$ARBLOC_CM\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#install-cargo-cli","title":"\ud83d\ude80 Install Cargo CLI","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#1-install-rust-stylus-cli","title":"1\ufe0f\u20e3 Install Rust &amp; Stylus CLI","text":"<p>Install Rust and then install the Stylus CLI tool:</p> <pre><code>cargo install --force cargo-stylus cargo-stylus-check\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#2-add-wasm-target","title":"2\ufe0f\u20e3 Add Wasm Target","text":"<pre><code>rustup target add wasm32-unknown-unknown\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#3-initialize-deploy-a-contract","title":"3\ufe0f\u20e3 Initialize &amp; Deploy a Contract","text":"<pre><code>cd src/contracts/stylus\ncargo new counterTest\ncd counter\ncargo stylus check\ncargo stylus deploy --private-key $ACC_PK --no-verify\n</code></pre> <p>Note</p> <p>Cached bytecode must be unique. Modify <code>src/lib.rs</code> before deployment, e.g., add a function: <pre><code>/// Sets a number in storage to a user-specified value.\npub fn set_number_version_1(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre></p>"},{"location":"old/getting-started/03-cacheManagerInteractions/#cache-manager-useful-commands","title":"\u2699\ufe0f Cache Manager Useful Commands","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#check-rust-contract-before-deployment","title":"\ud83d\udd0e Check Rust Contract Before Deployment","text":"<pre><code>cargo stylus check\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#deploy-rust-contract","title":"\ud83d\ude80 Deploy Rust Contract","text":"<pre><code>cargo stylus deploy --private-key $ACC_PK --no-verify --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#activate-contract","title":"\ud83d\udd11 Activate Contract","text":"<pre><code>cargo stylus activate --private-key $ACC_PK --address=$SC_ADD\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#check-cache-manager-status","title":"\ud83d\udcca Check Cache Manager Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#check-specific-contract-status","title":"\ud83d\udd0e Check Specific Contract Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC --address=$SC_ADD\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#suggest-cache-manager-bid-size","title":"\ud83d\udcb0 Suggest Cache Manager Bid Size","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#stylus-cli","title":"Stylus CLI","text":"<pre><code>cargo stylus cache suggest-bid $SC_ADD --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#foundry","title":"Foundry","text":"<pre><code>cast from-wei $(cast call $CM_ADD \"getMinBid(address)(uint256)\" $SC_ADD --rpc-url $RPC)\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#send-cache-manager-bid","title":"\ud83d\udcb8 Send Cache Manager Bid","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#stylus-cli_1","title":"Stylus CLI","text":"<pre><code>cargo stylus cache bid $SC_ADD $(cast to-wei 0.1) --private-key $ACC_PK --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#foundry_1","title":"Foundry","text":"<pre><code>cast send $CM_ADD \"placeBid(address)\" $SC_ADD --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0)\n</code></pre> <p>Note</p> <p>If an error occurs, use:</p> <p><pre><code>cast decode-error &lt;ERROR_CODE&gt;\n</code></pre> Cached bytecode will return an error if already stored.</p>"},{"location":"old/getting-started/03-cacheManagerInteractions/#cache-manager-admin-interactions","title":"\ud83d\udee0\ufe0f Cache Manager Admin Interactions","text":""},{"location":"old/getting-started/03-cacheManagerInteractions/#set-cache-size-bytes","title":"\ud83d\udce6 Set Cache Size (Bytes)","text":"<pre><code>cast send $CM_ADD \"setCacheSize(uint64)\" 3000000 --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#set-cache-decay-rate","title":"\ud83d\udcc9 Set Cache Decay Rate","text":"<pre><code>cast send $CM_ADD \"setDecayRate(uint64)\" 0 --rpc-url $ARBLOC_RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#evict-all-bid-entries","title":"\ud83e\uddf9 Evict All Bid Entries","text":"<pre><code>cast send $CM_ADD \"evictAll()\" --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#evict-k-bid-entries","title":"\ud83d\uddd1\ufe0f Evict K Bid Entries","text":"<pre><code>export K=1\ncast send $CM_ADD \"evictPrograms(uint256)\" $K --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"old/getting-started/03-cacheManagerInteractions/#get-bid-entries-default-getter","title":"\ud83d\udcdc Get Bid Entries (Default Getter)","text":"<pre><code>export K=0\ncast call $CM_ADD \"entries(uint256)(address code,uint256 size,uint256 bid)\" $K --rpc-url $RPC\n</code></pre> <p>Returns an error if the cache is empty.</p>"},{"location":"old/getting-started/03-cacheManagerInteractions/#get-all-bid-entries","title":"\ud83d\udcdc Get All Bid Entries","text":"<pre><code>cast call $CM_ADD \"getEntries()\" --rpc-url $RPC\n</code></pre> <p>May crash if the cache is too large.</p>"},{"location":"old/getting-started/03-cacheManagerInteractions/#get-smallest-k-bid-entries","title":"\ud83d\udcc9 Get Smallest K Bid Entries","text":"<pre><code>export K=10\ncast call $CM_ADD \"getSmallestEntries(uint256)\" $K --rpc-url $RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/","title":"\ud83d\ude80 Deploy and Cache Contracts","text":"<p>\ud83d\udee0 Setting Up Environment Variables</p> <p>Before proceeding, ensure you've properly set up the environment variables as outlined in the Cache Manager Interactions section.</p>"},{"location":"old/getting-started/04-CmGuidedTesting/#deploy-and-cache-with-stylus-cli","title":"\u2699\ufe0f Deploy and Cache with Stylus-CLI","text":""},{"location":"old/getting-started/04-CmGuidedTesting/#step-1-navigate-to-the-counter-test-project","title":"Step 1: Navigate to the Counter Test Project","text":"<pre><code>cd src/contracts/stylus/counterTest\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-2-deploy-the-contract","title":"Step 2: Deploy the Contract","text":"<pre><code>cargo stylus deploy --private-key $ACC_PK --no-verify --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-3-set-contract-address-as-env-variable","title":"Step 3: Set Contract Address as ENV Variable","text":"<pre><code>export SC_ADD=&lt;CONTRACT_ADDRESS&gt;\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-4-cache-the-contract","title":"Step 4: Cache the Contract","text":"<pre><code>cargo stylus cache bid $SC_ADD $(cast to-wei 0.001) --private-key $ACC_PK --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#deploy-and-cache-with-foundry","title":"\ud83d\udd25 Deploy and Cache with Foundry","text":""},{"location":"old/getting-started/04-CmGuidedTesting/#step-1-deploy-vending-machine-contract","title":"Step 1: Deploy Vending Machine Contract","text":"<pre><code>forge create --rpc-url $RPC --private-key $ACC_PK src/contracts/solidity/VendingMachine.sol:VendingMachine --broadcast\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-2-set-contract-address-as-env-variable","title":"Step 2: Set Contract Address as ENV Variable","text":"<pre><code>export SC_ADD=&lt;CONTRACT_ADDRESS&gt;\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-3-test-the-contract","title":"Step 3: Test the Contract","text":"<pre><code>cast call $SC_ADD \"getCupcakeBalanceFor(address)\" $ACC_ADD --rpc-url $RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-4-cache-the-contract-with-stylus-cli","title":"Step 4: Cache the Contract with Stylus-CLI","text":"<pre><code>cargo stylus cache bid $SC_ADD $(cast to-wei 0.001) --private-key $ACC_PK --endpoint=$RPC\n</code></pre> <p>Stylus Activation Issue</p> <p>Error: Stylus cache place bid failed. Cause: Your Stylus contract is not yet activated. Use the following command to activate it: <pre><code>    cargo stylus activate --private-key $ACC_PK --address=$SC_ADD\n</code></pre></p>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-5-cache-the-contract-with-foundry","title":"Step 5: Cache the Contract with Foundry","text":"<pre><code>cast send $CM_ADD \"placeBid(address)\" $SC_ADD --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.001)\n</code></pre> <p>Stylus Activation Issue</p> <p>Error: Execution reverted: <code>ProgramNotActivated()</code>.</p>"},{"location":"old/getting-started/04-CmGuidedTesting/#filling-the-cache","title":"\ud83d\udce6 Filling the Cache","text":""},{"location":"old/getting-started/04-CmGuidedTesting/#step-1-set-cache-size-to-21mb","title":"Step 1: Set Cache Size to 2.1MB","text":"<pre><code>cast send $CM_ADD \"setCacheSize(uint64)\" 2100000 --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-2-verify-cache-size","title":"Step 2: Verify Cache Size","text":"<pre><code>cast call $CM_ADD \"cacheSize()(uint256)\" --rpc-url $RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-3-clear-existing-cache-if-needed","title":"Step 3: Clear Existing Cache (If Needed)","text":"<pre><code>cast send $CM_ADD \"evictAll()\" --rpc-url $RPC --private-key $ARBLOC_OWNER_PK\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-4-check-cache-status","title":"Step 4: Check Cache Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-5-deploy-three-variations-of-countertest-contract","title":"Step 5: Deploy Three Variations of CounterTest Contract","text":"<p>Modify the function version before each deployment to ensure unique bytecode (filepath: <code>src/contracts/stylus/counterTest/src/lib.rs</code>).</p>"},{"location":"old/getting-started/04-CmGuidedTesting/#first-deployment","title":"First Deployment:","text":"<pre><code>pub fn set_number_version_0(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#second-deployment","title":"Second Deployment:","text":"<pre><code>pub fn set_number_version_1(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#third-deployment","title":"Third Deployment:","text":"<pre><code>pub fn set_number_version_2(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n}\n</code></pre> <p>Deploy each variation:</p> <pre><code>cargo stylus deploy --private-key $ACC_PK --no-verify --endpoint=$RPC\n</code></pre> <p>Save the deployed contract addresses:</p> <pre><code>export SC_ADD_0=&lt;ADDRESS_0&gt;\nexport SC_ADD_1=&lt;ADDRESS_1&gt;\nexport SC_ADD_2=&lt;ADDRESS_2&gt;\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-6-cache-contracts-with-different-bids","title":"Step 6: Cache Contracts with Different Bids","text":""},{"location":"old/getting-started/04-CmGuidedTesting/#cache-contract-0-with-0001-eth-bid","title":"Cache Contract 0 with 0.001 ETH Bid","text":"<pre><code>cast send $CM_ADD \"placeBid(address)\" $SC_ADD_0 --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.001)\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#check-cache-status","title":"Check Cache Status","text":"<pre><code>cargo stylus cache status --endpoint=$RPC\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#cache-contract-1-with-005-eth-bid","title":"Cache Contract 1 with 0.05 ETH Bid","text":"<pre><code>cast send $CM_ADD \"placeBid(address)\" $SC_ADD_1 --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0.05)\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#cache-contract-2-with-0-eth-bid-expected-to-fail-due-to-size-constraints","title":"Cache Contract 2 with 0 ETH Bid (Expected to Fail Due to Size Constraints)","text":"<pre><code>cast send $CM_ADD \"placeBid(address)\" $SC_ADD_2 --rpc-url $RPC --private-key $ACC_PK --value $(cast to-wei 0)\n</code></pre> <p>Expected Error:</p> <pre><code>cast decode-error 0xdf370e48...\n</code></pre> <p>BidTooSmall Error</p> <p>The contract is too large for available cache space. A higher bid is required to evict lower bids and make space.</p>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-7-get-suggested-bid-and-retry","title":"Step 7: Get Suggested Bid and Retry","text":"<pre><code>cargo stylus cache suggest-bid $SC_ADD_2 --endpoint=$RPC\n</code></pre> <p>Bid with the suggested value:</p> <pre><code>cast send $CM_ADD \"placeBid(address)\" $SC_ADD_2 --rpc-url $RPC --private-key $ACC_PK --value 1000000000000000\n</code></pre>"},{"location":"old/getting-started/04-CmGuidedTesting/#step-8-verify-cached-contracts","title":"Step 8: Verify Cached Contracts","text":"<pre><code>cargo stylus cache status --endpoint=$RPC --address=$SC_ADD_0\ncargo stylus cache status --endpoint=$RPC --address=$SC_ADD_1\ncargo stylus cache status --endpoint=$RPC --address=$SC_ADD_2\n</code></pre> <p>Cache Status Update</p> <p>The lowest bid (SC_ADD_0 with 0.001 ETH) has been evicted due to a higher competing bid.</p>"},{"location":"old/getting-started/UnorganizedNotes/","title":"UnorganizedNotes","text":""},{"location":"old/getting-started/UnorganizedNotes/#rpc-cheatsheet","title":"RPC Cheatsheet","text":"<ul> <li> <p>Deploy EVM VendingMachine contract</p> </li> <li> <p>Deploy WASM Counter contract</p> </li> </ul> <p>Install Rust, and then install the Stylus CLI tool with Cargo</p> <pre><code>cargo install --force cargo-stylus cargo-stylus-check\n</code></pre> <p>Add the <code>wasm32-unknown-unknown</code> build target to your Rust compiler:</p> <pre><code>rustup target add wasm32-unknown-unknown\n</code></pre> <p>Then initialize a testing contract template and deploy it or use pre-loaded counter contract</p> <pre><code>cd src/contracts/stylusContracts\ncargo new --minimal counter\ncd counter\ncargo stylus check\ncargo stylus deploy --private-key 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659 --no-verify\n</code></pre> <p>Cached Bytecode</p> <p>For being able to cache different contracts their bytecode should be different. If the same bytecode is deployed and it's already cached the system won't allow caching.</p> <p>For generating variations of counterTest edit src/lib.rs with any change before the deploy. For instance add a variable to any function <pre><code>/// Sets a number in storage to a user-specified value.\npub fn set_number(&amp;mut self, new_number: U256) {\n    self.number.set(new_number);\n    let variable = 1\n}\n</code></pre></p>"},{"location":"old/getting-started/UnorganizedNotes/#local-cache-manager-interactions","title":"Local Cache Manager Interactions","text":"<p>Get Min Bid For Contract</p> <pre><code>cast call 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"getMinBid(address)\" 0x1294b86822ff4976bfe136cb06cf43ec7fcf2574 --rpc-url http://localhost:8547\ncargo stylus cache bid --private-key 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659 0xd9bf5428c4a93aa2dedd0161f299071b9d1fec0a 0\n</code></pre> <p>Place Bid For Contract</p> <pre><code>cast send 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"placeBid(address)\" 0xd92773693917f0ff664f85c3cb698c33420947ff --rpc-url http://localhost:8547 --private-key 0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659 --value $(cast to-wei 0)\n</code></pre> <p>Current Cache Size</p> <pre><code>cast call 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"cacheSize()\" --rpc-url $ARBLOC_RPC\n</code></pre> <p>Set new Cache Size</p> <pre><code>cast send 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"setCacheSize(uint64)\" 3000000 --rpc-url $ARBLOC_RPC --private-key $L2OWNER_PK\n</code></pre> <p>Set new decay rate</p> <pre><code>cast send 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"setDecayRate(uint64)\" 0 --rpc-url $ARBLOC_RPC --private-key $L2OWNER_PK\n</code></pre> <p>Evict All</p> <pre><code>cast send 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"evictAll()\" --rpc-url $ARBLOC_RPC --private-key $L2OWNER_PK\n</code></pre> <p>Get Entries</p> <pre><code>cast call 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"getEntries()\" --rpc-url $ARBLOC_RPC\n</code></pre> <p>Get Smallest k Entries</p> <pre><code>cast call 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"getSmallestEntries(uint256)\" 1 --rpc-url $ARBLOC_RPC\n</code></pre> <p>Get Entry by array position</p> <pre><code>cast call 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 \"entries(uint256)(address,uint256,uint256)\" 0 --rpc-url $ARBLOC_RPC\n</code></pre> <p>Test Counter Contracts (720 KBs) 3bee4d202b6eb7fd4f0f7ab4ca0c3c81af619a6a 514adac2d6baf50b1c349658848d76a9a6ff9484 53409ae94aebf3b99a9d3cf41b8e093d0e185e20 dff854d7380cb5ac8da05b39f431907f963bdf4f 809fe0e639527a927977e64c0ed107dbf09cb248 4cef6f83ad0176094a2cf9df04edc8b730600e44 42cec64466fb0b23b9f996819cdd28d17bf4527b 54ab13583c41c68df27c13eda44bbbfeaee51ea0</p> <p>Test Big Contracts () 0xb3ab6c44b67a63836e2f315a958d3980f5950378 0x48b75b8bb49c0d566bf0a451c649105397969f76 0x2097b9e6872830dbe6769dda79df3f1927b43fde</p>"},{"location":"old/getting-started/UnorganizedNotes/#arb-sepolia-cache-manager-interactions","title":"ARB Sepolia Cache Manager Interactions","text":"<p>counterTest Contract</p> <pre><code>deployed code at address: 0xfd5518940c627aa12b875c14de16d54fd5e038c7\ndeployment tx hash: 0x512e93bf6b520aa4ee080fc162a561accaa42d190300baeeb77a11ab93675428\ncontract activated and ready onchain with tx hash: 0x66b669ebf4e1f1073d3cc6d19f8ee914930f3ce8c944e93e89adc405d5a2b2f9\n</code></pre> <pre><code>cargo stylus cache suggest-bid 0xfd5518940c627aa12b875c14de16d54fd5e038c7 --endpoint=$ARBSEP_RPC\n</code></pre> <pre><code>Minimum bid for contract 0xfd55\u202638c7: 0 wei\n\ncargo stylus cache bid --private-key $BCUSER_PK 0xfd5518940c627aa12b875c14de16d54fd5e038c7 0 --endpoint=$ARBSEP_RPC\nChecking if contract can be cached...\nSending cache bid tx...\nSuccessfully cached contract at address: 0xfD5518940C627aa12B875c14de16d54Fd5e038C7\nSent Stylus cache bid tx with hash: 0xc4f68e83b00618339e8132cfdb08bf0d2f7f887ca0820271a4d75d0cefd72a0f\n</code></pre>"},{"location":"old/getting-started/UnorganizedNotes/#chainlink-tests","title":"Chainlink Tests","text":"<p>Required envs can be sourced with</p> <pre><code>source src/scripts/sourceUsefulEnvs.sh\n</code></pre>"},{"location":"old/getting-started/UnorganizedNotes/#automated-counter","title":"Automated Counter","text":"<p>Deploy the contract</p> <pre><code>forge create --rpc-url $L1LOC_RPC --private-key $ARBPRE_PK src/contracts/solidity/CounterChainlink.sol:Counter --broadcast --constructor-args 20\n</code></pre> <p>Export contract address to env</p> <pre><code>export CONTRACT_ADD=&lt;DEPLOYED CONTRACT ADDRESS&gt;\n</code></pre> <p>Check upkeep condition</p> <pre><code>cast call $CONTRACT_ADD \"checkUpkeep(bytes)(bool,bytes)\" 0x --rpc-url $L1LOC_RPC\n</code></pre> <p>Trigger upkeep condition</p> <pre><code>cast send $CONTRACT_ADD \"performUpkeep(bytes)\" 0x --rpc-url $L1LOC_RPC --private-key $ARBPRE_PK\n</code></pre> <p>Check counter status</p> <pre><code>cast call $CONTRACT_ADD \"counter()\" 0x  --rpc-url $L1LOC_RPC --private-key $ARBPRE_PK\n</code></pre>"},{"location":"old/getting-started/UnorganizedNotes/#automated-counter-arb-sepolia","title":"Automated Counter @ ARB Sepolia","text":"<p>Address: 0xdaaA70D0884Ec86CEaE83c544963c545a4213246</p>"},{"location":"old/getting-started/UnorganizedNotes/#automated-cm-proxy-local","title":"Automated CM Proxy Local","text":"<p>CM Address: 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 SC To Be Cached: 0xd542490eba60e4b4d28d23c5b392b1607438f3cc</p> <p>Deploy Proxy forge create --rpc-url $ARBLOC_RPC --private-key $ARBPRE_PK src/contracts/solidity/CacheManagerAutomation.sol:CacheManagerAutomation --broadcast --constructor-args 0x0f1F89AAF1c6fDb7ff9D361E4388F5F3997f12A8 0xd542490eba60e4b4d28d23c5b392b1607438f3cc 1</p> <p>Deployer: 0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E Deployed to: 0x726dA98eA36289AA08EFCf638154DfA82F9FDEB6 Transaction hash: 0x211431dcf197d7c9d8d2a8025c64663ba9e5b91dfb2fa527a81a2020c43371b5</p> <p>export CONTRACT_ADD=0xED7EC2d4d4d9a6a702769679FB5A36f55EBf197B cast call $CONTRACT_ADD \"checkUpkeep(bytes)(bool,bytes)\" 0x --rpc-url $ARBLOC_RPC</p> <p>cast send $CONTRACT_ADD \"performUpkeep(bytes)\" 0x --rpc-url $ARBLOC_RPC --private-key $ARBPRE_PK</p>"},{"location":"old/local-deployment/","title":"Local Deployment","text":"<p>[WIP]</p>"},{"location":"old/local-deployment/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose </p>"},{"location":"old/local-deployment/#kubernetes","title":"Kubernetes","text":"<p>Kubernetes </p>"},{"location":"old/local-deployment/docker-compose/prerequisites/","title":"Docker Compose Prerequisites","text":"<p>&lt; TODO &gt;</p>"},{"location":"old/local-deployment/docker-compose/prerequisites/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Operating System: A Linux-based system or Windows Subsystem for Linux (WSL) for Windows users.</li> <li>Memory: A minimum of 8GB RAM to handle the containerized environment efficiently.</li> <li>Processor: At least a 2-core CPU for optimal performance.</li> <li>Architecture: Support for AMD64 architecture.</li> </ul>"},{"location":"old/local-deployment/docker-compose/prerequisites/#software-requirements","title":"Software Requirements","text":"<ol> <li> <p>Docker Engine (version 4.27 or higher)    Intro Installation guide for Docker</p> </li> <li> <p>Docker Compose    Intro Installation guide for Docker Compose</p> </li> <li> <p>Foundry: A powerful toolkit for Ethereum application development. Foundry Documentation</p> </li> <li>yq and jq: Command-line utilities for processing YAML and JSON files, which are essential for managing configuration files. yq Documentation | jq Documentation</li> </ol>"},{"location":"old/local-deployment/docker-compose/deployment/system-deployment/","title":"TODO","text":""},{"location":"old/local-deployment/kubernetes/prerequisites/","title":"Kubernetes Prerequisites","text":"<p>TODO</p>"},{"location":"old/local-deployment/kubernetes/prerequisites/#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>Operating System: A Linux-based system or Windows Subsystem for Linux (WSL) for Windows users.</li> <li>Memory: A minimum of 8GB RAM to manage multiple containerized services and Kubernetes workloads.</li> <li>Processor: At least a 2-core CPU for handling orchestration tasks efficiently.</li> <li>Architecture: Support for AMD64 architecture.</li> </ul>"},{"location":"old/local-deployment/kubernetes/prerequisites/#software-requirements","title":"Software Requirements","text":"<ul> <li> <p>Kubernetes    Kubernetes is the backbone of container orchestration. Ensure that your Kubernetes cluster is set up and functioning properly. Kubernetes Setup Guide</p> </li> <li> <p>kubectx and kubens   kubectx is a tool to switch between contexts (clusters) on kubectl faster.   kubens is a tool to switch between Kubernetes namespaces (and configure them for kubectl) easily.   kubectx and kubens Setup Guide</p> </li> <li> <p>Helm    Helm simplifies the deployment and management of Kubernetes applications. Ensure Helm is installed and configured. Helm Installation Guide</p> </li> <li> <p>HelmFile    HelmFile allows you to define, sync, and manage Helm charts through declarative YAML files, enhancing the management of multi-chart deployments. HelmFile Installation Guide</p> </li> <li> <p>yq and jq    These command-line tools are essential for manipulating YAML and JSON files. They are necessary for handling configuration files in Kubernetes and Helm deployments. yq Documentation | jq Documentation</p> </li> </ul> <p>Once your system meets these hardware and software requirements, you will be ready to deploy and manage your applications using Kubernetes, Helm, HelmFile, and HelmSecrets!</p>"},{"location":"old/local-deployment/kubernetes/deployment/system-deployment/","title":"TODO","text":""},{"location":"old/local-deployment/testing/","title":"Testing","text":""},{"location":"old/mkcheatsheet/","title":"Mk Cheatsheet","text":"<p>Example Title</p> <p>Different Admonitions Available</p> <ul> <li>note</li> <li>abstract</li> <li>info</li> <li>tip</li> <li>success </li> <li>question </li> <li>warning</li> <li>failure</li> <li>danger</li> <li>bug</li> <li>example</li> <li>quote</li> </ul> <p>This is a tip</p> <p>Tip</p> This is a collapsable tip! <p>Collapsable Tip</p> <p>This is an annotation, (1)</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p>Code Block <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: postgres-deployment\n</code></pre></p> <p>Code Block With Tabs</p> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"old/repo-structure/","title":"Repo Structure","text":""},{"location":"old/stylus-cm-contracts/overview/","title":"\ud83d\ude80 CacheManagerAutomation Overview","text":""},{"location":"old/stylus-cm-contracts/overview/#introduction","title":"\ud83d\udccc Introduction","text":"<p>The CacheManagerAutomation (CMA) is a powerful smart contract designed to automate the bidding process for Arbitrum's CacheManager. Users can seamlessly register their contracts, set maximum bid amounts, and deposit funds to keep their contracts cached. The automation is handled by Chainlink Automation, ensuring continuous and efficient re-bidding based on predefined conditions. \u26a1</p>"},{"location":"old/stylus-cm-contracts/overview/#key-features","title":"\ud83d\udd11 Key Features","text":""},{"location":"old/stylus-cm-contracts/overview/#1-automated-bidding","title":"1\ufe0f\u20e3 Automated Bidding \ud83e\udd16","text":"<ul> <li>Users can register contracts they wish to keep cached.</li> <li>Each contract is linked with:</li> <li>\ud83d\udcb0 Maximum Bid Amount \u2013 Defines the highest amount a user is willing to spend.</li> <li>\ud83c\udfe6 Funding Balance \u2013 Ensures there are sufficient funds for automated bidding.</li> <li>\ud83c\udfaf Trigger Condition \u2013 Determines when a re-bid should be placed.</li> </ul>"},{"location":"old/stylus-cm-contracts/overview/#2-chainlink-powered-automation","title":"2\ufe0f\u20e3 Chainlink-Powered Automation \ud83d\udd17\u26a1","text":"<ul> <li>\ud83d\udee0\ufe0f Integrated with Chainlink Automation to monitor contract eviction status.</li> <li>\ud83d\udd04 Automatically re-bids upon eviction to maintain caching.</li> </ul>"},{"location":"old/stylus-cm-contracts/overview/#3-flexible-secure-configuration","title":"3\ufe0f\u20e3 Flexible &amp; Secure Configuration \ud83d\udd12","text":"<ul> <li>The CacheManager address is set during deployment but can be updated by the owner if necessary.</li> <li>User funds are securely stored within the proxy and utilized for bidding based on pre-configured conditions.</li> </ul>"},{"location":"old/stylus-cm-contracts/overview/#local-testing","title":"\ud83e\uddea Local Testing","text":"<p>The contract supports local testing on the localArb chain \ud83d\udee0\ufe0f.</p> <ul> <li>\ud83d\udda5\ufe0f RPC URL for local testing: <code>http://localhost:8547</code></li> <li>\ud83d\udce6 A simulated CacheManager instance is available for running tests.</li> </ul> <p>\ud83d\udd0d Ready to automate your cache bidding? Get started today! \ud83d\ude80</p>"},{"location":"old/stylus-cm-contracts/testing/","title":"\ud83d\udee0\ufe0f Stylus Cache Manager Proxy Testing","text":"<p>This testing suite ensures the correctness and reliability of the Stylus Cache Manager Automation (CMA) smart contract. Through a series of automated tests, we verify that the contract behaves as expected under various scenarios, including normal operation, edge cases, and error conditions.</p>"},{"location":"old/stylus-cm-contracts/testing/#prerequisites","title":"\ud83d\udccc Prerequisites","text":"<p>Before running the test suite, follow the instructions in Nitro Test Node to deploy a fully functional Arbitrum chain on your local machine. This setup provides the necessary environment for testing the Stylus Cache Manager Proxy.</p>"},{"location":"old/stylus-cm-contracts/testing/#testing-suite-structure","title":"\ud83e\uddea Testing Suite Structure","text":"<p>The test suite follows a structured format:</p> <ol> <li><code>before</code> Hook: Deploys the CMA on top of a pre-deployed CacheManager (CM) contract on the localArb test node.</li> <li><code>beforeEach</code> Hook: Ensures a clean state by evicting all contracts from CM before each test.</li> <li>Test Cases (<code>describe</code> Blocks): Contains the actual test scenarios to validate different contract behaviors.</li> </ol>"},{"location":"old/stylus-cm-contracts/testing/#running-the-test-suite","title":"\ud83d\ude80 Running the Test Suite","text":"<p>Follow these steps to execute the tests:</p>"},{"location":"old/stylus-cm-contracts/testing/#1-navigate-to-the-test-directory","title":"1\ufe0f\u20e3 Navigate to the Test Directory","text":"<pre><code>cd submodules/stylus-cm-contracts\n</code></pre>"},{"location":"old/stylus-cm-contracts/testing/#2-install-required-dependencies","title":"2\ufe0f\u20e3 Install Required Dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"old/stylus-cm-contracts/testing/#3-run-the-test-suite","title":"3\ufe0f\u20e3 Run the Test Suite","text":"<pre><code>npm run test\n</code></pre> <p>\ud83c\udfaf Done! The test results will indicate whether the contract behaves as expected across all defined scenarios.</p>"},{"location":"old/testnet/","title":"Index","text":""},{"location":"old/testnet/#testnet","title":"Testnet","text":""},{"location":"old/testnet/bridge/","title":"Bridge","text":""},{"location":"old/testnet/explorers/","title":"Explorers","text":""},{"location":"old/testnet/explorers/#explorers","title":"Explorers","text":""},{"location":"old/testnet/playground/","title":"Playground","text":""}]}